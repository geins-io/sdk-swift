//
// PriceListModelsReadPriceListPrice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A price for a product on a specific price list. */
public struct PriceListModelsReadPriceListPrice: Codable, JSONEncodable, Hashable {

    /** The id of the product that this price applies to. */
    public var productId: Int?
    /** The id of the price list that this price is associated with. */
    public var priceListId: Int?
    /** The name of the price list that this price is associated with. */
    public var priceListName: String?
    /** The price, inc VAT, in the currency of the associated price list. */
    public var priceIncVat: Double?
    /** The price, ex VAT, in the currency of the associated price list. */
    public var priceExVat: Double?
    /** The Vat Rate */
    public var vatRate: Double?
    /** The 2-letter ISO country code for this price. */
    public var country: String?
    /** The 3-letter ISO 4217 currency code for this price. */
    public var currency: String?
    /** Staggered count for this price. Defaults to 1. */
    public var staggeredCount: Int?
    /** The date the price is valid from. */
    public var validFrom: Date?
    /** The date the price is valid to. */
    public var validTo: Date?

    public init(productId: Int? = nil, priceListId: Int? = nil, priceListName: String? = nil, priceIncVat: Double? = nil, priceExVat: Double? = nil, vatRate: Double? = nil, country: String? = nil, currency: String? = nil, staggeredCount: Int? = nil, validFrom: Date? = nil, validTo: Date? = nil) {
        self.productId = productId
        self.priceListId = priceListId
        self.priceListName = priceListName
        self.priceIncVat = priceIncVat
        self.priceExVat = priceExVat
        self.vatRate = vatRate
        self.country = country
        self.currency = currency
        self.staggeredCount = staggeredCount
        self.validFrom = validFrom
        self.validTo = validTo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case productId = "ProductId"
        case priceListId = "PriceListId"
        case priceListName = "PriceListName"
        case priceIncVat = "PriceIncVat"
        case priceExVat = "PriceExVat"
        case vatRate = "VatRate"
        case country = "Country"
        case currency = "Currency"
        case staggeredCount = "StaggeredCount"
        case validFrom = "ValidFrom"
        case validTo = "ValidTo"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(priceListName, forKey: .priceListName)
        try container.encodeIfPresent(priceIncVat, forKey: .priceIncVat)
        try container.encodeIfPresent(priceExVat, forKey: .priceExVat)
        try container.encodeIfPresent(vatRate, forKey: .vatRate)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(staggeredCount, forKey: .staggeredCount)
        try container.encodeIfPresent(validFrom, forKey: .validFrom)
        try container.encodeIfPresent(validTo, forKey: .validTo)
    }
}

