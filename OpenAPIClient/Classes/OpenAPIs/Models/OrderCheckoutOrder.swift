//
// OrderCheckoutOrder.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderCheckoutOrder: Codable, JSONEncodable, Hashable {

    public enum Gender: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    public var orderId: String?
    public var externalOrderId: String?
    public var cartId: String?
    public var sessionId: String?
    public var siteId: Int?
    public var currency: String?
    public var status: String?
    public var ipAddress: String?
    public var message: String?
    public var internalMessage: String?
    public var locale: String?
    public var rows: [OrderCheckoutOrderRow]?
    public var campaignId: Int?
    public var campaignCode: String?
    public var campaignName: String?
    public var campaignIds: [String]?
    public var campaignNames: [String]?
    public var customerId: Int?
    public var customerTypeId: Int?
    public var gender: Gender?
    public var dateOfBirth: Date?
    public var personalId: String?
    public var userAgent: String?
    public var metaData: [String: String]?
    public var paymentId: Int?
    public var transactionId: String?
    public var secondaryTransactionId: String?
    public var country: String?
    public var company: String?
    public var organizationNumber: String?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var address1: String?
    public var address2: String?
    public var zip: String?
    public var city: String?
    public var region: String?
    public var phone: String?
    public var mobilePhone: String?
    public var careOf: String?
    public var shippingId: Int?
    public var shippingCountry: String?
    public var shippingCompany: String?
    public var shippingOrganizationNumber: String?
    public var shippingFirstName: String?
    public var shippingLastName: String?
    public var shippingEmail: String?
    public var shippingAddress1: String?
    public var shippingAddress2: String?
    public var shippingZip: String?
    public var shippingCity: String?
    public var shippingRegion: String?
    public var shippingPhone: String?
    public var shippingMobilePhone: String?
    public var shippingCareOf: String?
    public var pickupPoint: String?
    public var desiredDeliveryDate: Date?
    public var freightClass: OrderFreightClass?
    public var sum: Double?
    public var expectedSum: Double?
    public var orderValueIncVat: Double?
    public var orderValueExVat: Double?
    public var itemValueIncVat: Double?
    public var itemValueExVat: Double?
    public var discountIncVat: Double?
    public var discountExVat: Double?
    public var percentDiscount: Int?
    public var balance: Double?
    public var shippingFeeIncVat: Double?
    public var shippingFeeExVat: Double?
    public var paymentFeeIncVat: Double?
    public var paymentFeeExVat: Double?

    public init(orderId: String? = nil, externalOrderId: String? = nil, cartId: String? = nil, sessionId: String? = nil, siteId: Int? = nil, currency: String? = nil, status: String? = nil, ipAddress: String? = nil, message: String? = nil, internalMessage: String? = nil, locale: String? = nil, rows: [OrderCheckoutOrderRow]? = nil, campaignId: Int? = nil, campaignCode: String? = nil, campaignName: String? = nil, campaignIds: [String]? = nil, campaignNames: [String]? = nil, customerId: Int? = nil, customerTypeId: Int? = nil, gender: Gender? = nil, dateOfBirth: Date? = nil, personalId: String? = nil, userAgent: String? = nil, metaData: [String: String]? = nil, paymentId: Int? = nil, transactionId: String? = nil, secondaryTransactionId: String? = nil, country: String? = nil, company: String? = nil, organizationNumber: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, address1: String? = nil, address2: String? = nil, zip: String? = nil, city: String? = nil, region: String? = nil, phone: String? = nil, mobilePhone: String? = nil, careOf: String? = nil, shippingId: Int? = nil, shippingCountry: String? = nil, shippingCompany: String? = nil, shippingOrganizationNumber: String? = nil, shippingFirstName: String? = nil, shippingLastName: String? = nil, shippingEmail: String? = nil, shippingAddress1: String? = nil, shippingAddress2: String? = nil, shippingZip: String? = nil, shippingCity: String? = nil, shippingRegion: String? = nil, shippingPhone: String? = nil, shippingMobilePhone: String? = nil, shippingCareOf: String? = nil, pickupPoint: String? = nil, desiredDeliveryDate: Date? = nil, freightClass: OrderFreightClass? = nil, sum: Double? = nil, expectedSum: Double? = nil, orderValueIncVat: Double? = nil, orderValueExVat: Double? = nil, itemValueIncVat: Double? = nil, itemValueExVat: Double? = nil, discountIncVat: Double? = nil, discountExVat: Double? = nil, percentDiscount: Int? = nil, balance: Double? = nil, shippingFeeIncVat: Double? = nil, shippingFeeExVat: Double? = nil, paymentFeeIncVat: Double? = nil, paymentFeeExVat: Double? = nil) {
        self.orderId = orderId
        self.externalOrderId = externalOrderId
        self.cartId = cartId
        self.sessionId = sessionId
        self.siteId = siteId
        self.currency = currency
        self.status = status
        self.ipAddress = ipAddress
        self.message = message
        self.internalMessage = internalMessage
        self.locale = locale
        self.rows = rows
        self.campaignId = campaignId
        self.campaignCode = campaignCode
        self.campaignName = campaignName
        self.campaignIds = campaignIds
        self.campaignNames = campaignNames
        self.customerId = customerId
        self.customerTypeId = customerTypeId
        self.gender = gender
        self.dateOfBirth = dateOfBirth
        self.personalId = personalId
        self.userAgent = userAgent
        self.metaData = metaData
        self.paymentId = paymentId
        self.transactionId = transactionId
        self.secondaryTransactionId = secondaryTransactionId
        self.country = country
        self.company = company
        self.organizationNumber = organizationNumber
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.address1 = address1
        self.address2 = address2
        self.zip = zip
        self.city = city
        self.region = region
        self.phone = phone
        self.mobilePhone = mobilePhone
        self.careOf = careOf
        self.shippingId = shippingId
        self.shippingCountry = shippingCountry
        self.shippingCompany = shippingCompany
        self.shippingOrganizationNumber = shippingOrganizationNumber
        self.shippingFirstName = shippingFirstName
        self.shippingLastName = shippingLastName
        self.shippingEmail = shippingEmail
        self.shippingAddress1 = shippingAddress1
        self.shippingAddress2 = shippingAddress2
        self.shippingZip = shippingZip
        self.shippingCity = shippingCity
        self.shippingRegion = shippingRegion
        self.shippingPhone = shippingPhone
        self.shippingMobilePhone = shippingMobilePhone
        self.shippingCareOf = shippingCareOf
        self.pickupPoint = pickupPoint
        self.desiredDeliveryDate = desiredDeliveryDate
        self.freightClass = freightClass
        self.sum = sum
        self.expectedSum = expectedSum
        self.orderValueIncVat = orderValueIncVat
        self.orderValueExVat = orderValueExVat
        self.itemValueIncVat = itemValueIncVat
        self.itemValueExVat = itemValueExVat
        self.discountIncVat = discountIncVat
        self.discountExVat = discountExVat
        self.percentDiscount = percentDiscount
        self.balance = balance
        self.shippingFeeIncVat = shippingFeeIncVat
        self.shippingFeeExVat = shippingFeeExVat
        self.paymentFeeIncVat = paymentFeeIncVat
        self.paymentFeeExVat = paymentFeeExVat
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderId = "OrderId"
        case externalOrderId = "ExternalOrderId"
        case cartId = "CartId"
        case sessionId = "SessionId"
        case siteId = "SiteId"
        case currency = "Currency"
        case status = "Status"
        case ipAddress = "IpAddress"
        case message = "Message"
        case internalMessage = "InternalMessage"
        case locale = "Locale"
        case rows = "Rows"
        case campaignId = "CampaignId"
        case campaignCode = "CampaignCode"
        case campaignName = "CampaignName"
        case campaignIds = "CampaignIds"
        case campaignNames = "CampaignNames"
        case customerId = "CustomerId"
        case customerTypeId = "CustomerTypeId"
        case gender = "Gender"
        case dateOfBirth = "DateOfBirth"
        case personalId = "PersonalId"
        case userAgent = "UserAgent"
        case metaData = "MetaData"
        case paymentId = "PaymentId"
        case transactionId = "TransactionId"
        case secondaryTransactionId = "SecondaryTransactionId"
        case country = "Country"
        case company = "Company"
        case organizationNumber = "OrganizationNumber"
        case firstName = "FirstName"
        case lastName = "LastName"
        case email = "Email"
        case address1 = "Address1"
        case address2 = "Address2"
        case zip = "Zip"
        case city = "City"
        case region = "Region"
        case phone = "Phone"
        case mobilePhone = "MobilePhone"
        case careOf = "CareOf"
        case shippingId = "ShippingId"
        case shippingCountry = "ShippingCountry"
        case shippingCompany = "ShippingCompany"
        case shippingOrganizationNumber = "ShippingOrganizationNumber"
        case shippingFirstName = "ShippingFirstName"
        case shippingLastName = "ShippingLastName"
        case shippingEmail = "ShippingEmail"
        case shippingAddress1 = "ShippingAddress1"
        case shippingAddress2 = "ShippingAddress2"
        case shippingZip = "ShippingZip"
        case shippingCity = "ShippingCity"
        case shippingRegion = "ShippingRegion"
        case shippingPhone = "ShippingPhone"
        case shippingMobilePhone = "ShippingMobilePhone"
        case shippingCareOf = "ShippingCareOf"
        case pickupPoint = "PickupPoint"
        case desiredDeliveryDate = "DesiredDeliveryDate"
        case freightClass = "FreightClass"
        case sum = "Sum"
        case expectedSum = "ExpectedSum"
        case orderValueIncVat = "OrderValueIncVat"
        case orderValueExVat = "OrderValueExVat"
        case itemValueIncVat = "ItemValueIncVat"
        case itemValueExVat = "ItemValueExVat"
        case discountIncVat = "DiscountIncVat"
        case discountExVat = "DiscountExVat"
        case percentDiscount = "PercentDiscount"
        case balance = "Balance"
        case shippingFeeIncVat = "ShippingFeeIncVat"
        case shippingFeeExVat = "ShippingFeeExVat"
        case paymentFeeIncVat = "PaymentFeeIncVat"
        case paymentFeeExVat = "PaymentFeeExVat"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(externalOrderId, forKey: .externalOrderId)
        try container.encodeIfPresent(cartId, forKey: .cartId)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(internalMessage, forKey: .internalMessage)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(rows, forKey: .rows)
        try container.encodeIfPresent(campaignId, forKey: .campaignId)
        try container.encodeIfPresent(campaignCode, forKey: .campaignCode)
        try container.encodeIfPresent(campaignName, forKey: .campaignName)
        try container.encodeIfPresent(campaignIds, forKey: .campaignIds)
        try container.encodeIfPresent(campaignNames, forKey: .campaignNames)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(customerTypeId, forKey: .customerTypeId)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(personalId, forKey: .personalId)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(metaData, forKey: .metaData)
        try container.encodeIfPresent(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(secondaryTransactionId, forKey: .secondaryTransactionId)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(organizationNumber, forKey: .organizationNumber)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(zip, forKey: .zip)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(mobilePhone, forKey: .mobilePhone)
        try container.encodeIfPresent(careOf, forKey: .careOf)
        try container.encodeIfPresent(shippingId, forKey: .shippingId)
        try container.encodeIfPresent(shippingCountry, forKey: .shippingCountry)
        try container.encodeIfPresent(shippingCompany, forKey: .shippingCompany)
        try container.encodeIfPresent(shippingOrganizationNumber, forKey: .shippingOrganizationNumber)
        try container.encodeIfPresent(shippingFirstName, forKey: .shippingFirstName)
        try container.encodeIfPresent(shippingLastName, forKey: .shippingLastName)
        try container.encodeIfPresent(shippingEmail, forKey: .shippingEmail)
        try container.encodeIfPresent(shippingAddress1, forKey: .shippingAddress1)
        try container.encodeIfPresent(shippingAddress2, forKey: .shippingAddress2)
        try container.encodeIfPresent(shippingZip, forKey: .shippingZip)
        try container.encodeIfPresent(shippingCity, forKey: .shippingCity)
        try container.encodeIfPresent(shippingRegion, forKey: .shippingRegion)
        try container.encodeIfPresent(shippingPhone, forKey: .shippingPhone)
        try container.encodeIfPresent(shippingMobilePhone, forKey: .shippingMobilePhone)
        try container.encodeIfPresent(shippingCareOf, forKey: .shippingCareOf)
        try container.encodeIfPresent(pickupPoint, forKey: .pickupPoint)
        try container.encodeIfPresent(desiredDeliveryDate, forKey: .desiredDeliveryDate)
        try container.encodeIfPresent(freightClass, forKey: .freightClass)
        try container.encodeIfPresent(sum, forKey: .sum)
        try container.encodeIfPresent(expectedSum, forKey: .expectedSum)
        try container.encodeIfPresent(orderValueIncVat, forKey: .orderValueIncVat)
        try container.encodeIfPresent(orderValueExVat, forKey: .orderValueExVat)
        try container.encodeIfPresent(itemValueIncVat, forKey: .itemValueIncVat)
        try container.encodeIfPresent(itemValueExVat, forKey: .itemValueExVat)
        try container.encodeIfPresent(discountIncVat, forKey: .discountIncVat)
        try container.encodeIfPresent(discountExVat, forKey: .discountExVat)
        try container.encodeIfPresent(percentDiscount, forKey: .percentDiscount)
        try container.encodeIfPresent(balance, forKey: .balance)
        try container.encodeIfPresent(shippingFeeIncVat, forKey: .shippingFeeIncVat)
        try container.encodeIfPresent(shippingFeeExVat, forKey: .shippingFeeExVat)
        try container.encodeIfPresent(paymentFeeIncVat, forKey: .paymentFeeIncVat)
        try container.encodeIfPresent(paymentFeeExVat, forKey: .paymentFeeExVat)
    }
}

