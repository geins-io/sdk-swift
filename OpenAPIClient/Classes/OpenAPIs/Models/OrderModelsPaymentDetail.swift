//
// OrderModelsPaymentDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data carrier for a payment detail */
public struct OrderModelsPaymentDetail: Codable, JSONEncodable, Hashable {

    /** Unique identifier for this payment detail. Exception: For some payment options this field can be 0. These orders only have one payment detail. */
    public var id: Int?
    /** Payment method id */
    public var paymentId: Int?
    /** The name of the payment method */
    public var name: String?
    /** The display name of the payment method */
    public var displayName: String?
    /** The transaction id (external reference). */
    public var transactionId: String?
    /** The secondary transaction id, if any (external reference). */
    public var secondaryTransactionId: String?
    /** The reservation number. This field is not available for all payment methods. */
    public var reservationNumber: String?
    /** Reservation date */
    public var reservationDate: Date?
    /** Payment date */
    public var paymentDate: Date?
    /** Total */
    public var total: Double?
    /** Shows if the order is paid using this payment method */
    public var payed: Bool?
    /** The payment fee */
    public var paymentFee: Double?
    /** The shipping fee */
    public var shippingFee: Double?
    /** The name of the payment option, if any.  This doesn't have to be the same as the payment name. Eg \"Direct bank payment\", \"Card\", \"Invoice\" etc. */
    public var paymentOption: String?

    public init(id: Int? = nil, paymentId: Int? = nil, name: String? = nil, displayName: String? = nil, transactionId: String? = nil, secondaryTransactionId: String? = nil, reservationNumber: String? = nil, reservationDate: Date? = nil, paymentDate: Date? = nil, total: Double? = nil, payed: Bool? = nil, paymentFee: Double? = nil, shippingFee: Double? = nil, paymentOption: String? = nil) {
        self.id = id
        self.paymentId = paymentId
        self.name = name
        self.displayName = displayName
        self.transactionId = transactionId
        self.secondaryTransactionId = secondaryTransactionId
        self.reservationNumber = reservationNumber
        self.reservationDate = reservationDate
        self.paymentDate = paymentDate
        self.total = total
        self.payed = payed
        self.paymentFee = paymentFee
        self.shippingFee = shippingFee
        self.paymentOption = paymentOption
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case paymentId = "PaymentId"
        case name = "Name"
        case displayName = "DisplayName"
        case transactionId = "TransactionId"
        case secondaryTransactionId = "SecondaryTransactionId"
        case reservationNumber = "ReservationNumber"
        case reservationDate = "ReservationDate"
        case paymentDate = "PaymentDate"
        case total = "Total"
        case payed = "Payed"
        case paymentFee = "PaymentFee"
        case shippingFee = "ShippingFee"
        case paymentOption = "PaymentOption"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(secondaryTransactionId, forKey: .secondaryTransactionId)
        try container.encodeIfPresent(reservationNumber, forKey: .reservationNumber)
        try container.encodeIfPresent(reservationDate, forKey: .reservationDate)
        try container.encodeIfPresent(paymentDate, forKey: .paymentDate)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(payed, forKey: .payed)
        try container.encodeIfPresent(paymentFee, forKey: .paymentFee)
        try container.encodeIfPresent(shippingFee, forKey: .shippingFee)
        try container.encodeIfPresent(paymentOption, forKey: .paymentOption)
    }
}

