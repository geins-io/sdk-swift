//
// ProductParameterModelsReadProductParameter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An existing product parameter. */
public struct ProductParameterModelsReadProductParameter: Codable, JSONEncodable, Hashable {

    public enum ParameterType: Int, Codable, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
    }
    /** The unique identifier for the parameter. */
    public var parameterId: Int?
    /** The unique identifier of the group that this parameter belongs to. */
    public var groupId: Int?
    /** The name of the group that this parameter belongs to. */
    public var groupName: String?
    /** The type of parameter. */
    public var parameterType: ParameterType?
    /** The non-localized name of the parameter. */
    public var name: String?

    public init(parameterId: Int? = nil, groupId: Int? = nil, groupName: String? = nil, parameterType: ParameterType? = nil, name: String? = nil) {
        self.parameterId = parameterId
        self.groupId = groupId
        self.groupName = groupName
        self.parameterType = parameterType
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case parameterId = "ParameterId"
        case groupId = "GroupId"
        case groupName = "GroupName"
        case parameterType = "ParameterType"
        case name = "Name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(parameterId, forKey: .parameterId)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(parameterType, forKey: .parameterType)
        try container.encodeIfPresent(name, forKey: .name)
    }
}

