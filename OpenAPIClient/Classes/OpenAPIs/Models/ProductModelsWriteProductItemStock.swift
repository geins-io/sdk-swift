//
// ProductModelsWriteProductItemStock.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A stock value for a product item */
public struct ProductModelsWriteProductItemStock: Codable, JSONEncodable, Hashable {

    public enum StockType: Int, Codable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }
    /** A value to uniquely identity a single product item.  <remarks>This value can represent different fields, depending on configuration.</remarks> */
    public var id: String?
    /** The stock value. */
    public var stock: Int?
    /** The sellable stock value.  <remarks>This value is read only.</remarks> */
    public var stockSellable: Int?
    /** The type of stock to be updated. See {Product.Models.ProductItemStockType} */
    public var stockType: StockType?

    public init(id: String? = nil, stock: Int? = nil, stockSellable: Int? = nil, stockType: StockType? = nil) {
        self.id = id
        self.stock = stock
        self.stockSellable = stockSellable
        self.stockType = stockType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case stock = "Stock"
        case stockSellable = "StockSellable"
        case stockType = "StockType"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(stock, forKey: .stock)
        try container.encodeIfPresent(stockSellable, forKey: .stockSellable)
        try container.encodeIfPresent(stockType, forKey: .stockType)
    }
}

