//
// OrderModelsOrderQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data carrying class for order queries */
public struct OrderModelsOrderQuery: Codable, JSONEncodable, Hashable {

    /** Given a date, only orders updated after the provided date will be returned. */
    public var updated: Date?
    /** Comma separated list of statuses to filter on. */
    public var statusList: String?
    /** Id of a market. */
    public var marketId: Int?
    /** Name of a payment method */
    public var paymentName: String?
    /** Id of a parcel group. */
    public var parcelGroupId: Int?
    /** The ID of a customer */
    public var customerId: Int?
    /** The email of a customer */
    public var email: String?
    /** Comma separated list of child-collections to also include in the query result. */
    public var include: String?
    /** This status can be used by external systems to change the status of an order. Such as failed or done. */
    public var externalOrderStatus: Int?
    /** If true, will combine all order rows that are part of a container into a single container row. */
    public var combineProductContainerRows: Bool?
    /** The packing place to get orders from. */
    public var packingLocationId: Int?

    public init(updated: Date? = nil, statusList: String? = nil, marketId: Int? = nil, paymentName: String? = nil, parcelGroupId: Int? = nil, customerId: Int? = nil, email: String? = nil, include: String? = nil, externalOrderStatus: Int? = nil, combineProductContainerRows: Bool? = nil, packingLocationId: Int? = nil) {
        self.updated = updated
        self.statusList = statusList
        self.marketId = marketId
        self.paymentName = paymentName
        self.parcelGroupId = parcelGroupId
        self.customerId = customerId
        self.email = email
        self.include = include
        self.externalOrderStatus = externalOrderStatus
        self.combineProductContainerRows = combineProductContainerRows
        self.packingLocationId = packingLocationId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case updated = "Updated"
        case statusList = "StatusList"
        case marketId = "MarketId"
        case paymentName = "PaymentName"
        case parcelGroupId = "ParcelGroupId"
        case customerId = "CustomerId"
        case email = "Email"
        case include = "Include"
        case externalOrderStatus = "ExternalOrderStatus"
        case combineProductContainerRows = "CombineProductContainerRows"
        case packingLocationId = "PackingLocationId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(updated, forKey: .updated)
        try container.encodeIfPresent(statusList, forKey: .statusList)
        try container.encodeIfPresent(marketId, forKey: .marketId)
        try container.encodeIfPresent(paymentName, forKey: .paymentName)
        try container.encodeIfPresent(parcelGroupId, forKey: .parcelGroupId)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(include, forKey: .include)
        try container.encodeIfPresent(externalOrderStatus, forKey: .externalOrderStatus)
        try container.encodeIfPresent(combineProductContainerRows, forKey: .combineProductContainerRows)
        try container.encodeIfPresent(packingLocationId, forKey: .packingLocationId)
    }
}

