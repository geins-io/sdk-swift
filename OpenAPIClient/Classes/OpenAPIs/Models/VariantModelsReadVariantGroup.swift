//
// VariantModelsReadVariantGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A variant group for a collection of related variants. */
public struct VariantModelsReadVariantGroup: Codable, JSONEncodable, Hashable {

    /** The id of variant goup. */
    public var groupId: Int?
    /** The optional internal name of the variant group. */
    public var name: String?
    /** Determine visibility of non-main products of this group in lists. */
    public var collapseInLists: Bool?
    /** The main product of this group. If the group is collapsed in lists, this will be the only visible product. */
    public var mainProductId: Int?
    /** The product ids of the variants that belong to this group. */
    public var productIds: [Int]?
    /** Products belonging to the Variant group. Only included when parameter \"include\" is supplied in the query string */
    public var products: [ProductModelsReadProduct]?

    public init(groupId: Int? = nil, name: String? = nil, collapseInLists: Bool? = nil, mainProductId: Int? = nil, productIds: [Int]? = nil, products: [ProductModelsReadProduct]? = nil) {
        self.groupId = groupId
        self.name = name
        self.collapseInLists = collapseInLists
        self.mainProductId = mainProductId
        self.productIds = productIds
        self.products = products
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case groupId = "GroupId"
        case name = "Name"
        case collapseInLists = "CollapseInLists"
        case mainProductId = "MainProductId"
        case productIds = "ProductIds"
        case products = "Products"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(collapseInLists, forKey: .collapseInLists)
        try container.encodeIfPresent(mainProductId, forKey: .mainProductId)
        try container.encodeIfPresent(productIds, forKey: .productIds)
        try container.encodeIfPresent(products, forKey: .products)
    }
}

