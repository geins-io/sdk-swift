//
// OrderRefund.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderRefund: Codable, JSONEncodable, Hashable {

    public var refundId: UUID?
    public var refundInstanceId: Int?
    public var orderId: Int?
    public var externalOrderId: String?
    public var externalId: String?
    public var reference: String?
    public var description: String?
    public var processedOn: Date?
    public var refundedItemTotal: Double?
    public var refundedShippingFee: Double?
    public var refundedPaymentFee: Double?
    public var refundedDiscount: Double?
    public var refundedBalance: Double?
    public var vatRate: Double?
    public var paymentName: String?
    public var locale: String?
    public var rows: [OrderRefundRow]?
    public var orderTransactionId: String?
    public var secondaryOrderTransactionId: String?

    public init(refundId: UUID? = nil, refundInstanceId: Int? = nil, orderId: Int? = nil, externalOrderId: String? = nil, externalId: String? = nil, reference: String? = nil, description: String? = nil, processedOn: Date? = nil, refundedItemTotal: Double? = nil, refundedShippingFee: Double? = nil, refundedPaymentFee: Double? = nil, refundedDiscount: Double? = nil, refundedBalance: Double? = nil, vatRate: Double? = nil, paymentName: String? = nil, locale: String? = nil, rows: [OrderRefundRow]? = nil, orderTransactionId: String? = nil, secondaryOrderTransactionId: String? = nil) {
        self.refundId = refundId
        self.refundInstanceId = refundInstanceId
        self.orderId = orderId
        self.externalOrderId = externalOrderId
        self.externalId = externalId
        self.reference = reference
        self.description = description
        self.processedOn = processedOn
        self.refundedItemTotal = refundedItemTotal
        self.refundedShippingFee = refundedShippingFee
        self.refundedPaymentFee = refundedPaymentFee
        self.refundedDiscount = refundedDiscount
        self.refundedBalance = refundedBalance
        self.vatRate = vatRate
        self.paymentName = paymentName
        self.locale = locale
        self.rows = rows
        self.orderTransactionId = orderTransactionId
        self.secondaryOrderTransactionId = secondaryOrderTransactionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case refundId = "RefundId"
        case refundInstanceId = "RefundInstanceId"
        case orderId = "OrderId"
        case externalOrderId = "ExternalOrderId"
        case externalId = "ExternalId"
        case reference = "Reference"
        case description = "Description"
        case processedOn = "ProcessedOn"
        case refundedItemTotal = "RefundedItemTotal"
        case refundedShippingFee = "RefundedShippingFee"
        case refundedPaymentFee = "RefundedPaymentFee"
        case refundedDiscount = "RefundedDiscount"
        case refundedBalance = "RefundedBalance"
        case vatRate = "VatRate"
        case paymentName = "PaymentName"
        case locale = "Locale"
        case rows = "Rows"
        case orderTransactionId = "OrderTransactionId"
        case secondaryOrderTransactionId = "SecondaryOrderTransactionId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(refundId, forKey: .refundId)
        try container.encodeIfPresent(refundInstanceId, forKey: .refundInstanceId)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(externalOrderId, forKey: .externalOrderId)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(reference, forKey: .reference)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(processedOn, forKey: .processedOn)
        try container.encodeIfPresent(refundedItemTotal, forKey: .refundedItemTotal)
        try container.encodeIfPresent(refundedShippingFee, forKey: .refundedShippingFee)
        try container.encodeIfPresent(refundedPaymentFee, forKey: .refundedPaymentFee)
        try container.encodeIfPresent(refundedDiscount, forKey: .refundedDiscount)
        try container.encodeIfPresent(refundedBalance, forKey: .refundedBalance)
        try container.encodeIfPresent(vatRate, forKey: .vatRate)
        try container.encodeIfPresent(paymentName, forKey: .paymentName)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(rows, forKey: .rows)
        try container.encodeIfPresent(orderTransactionId, forKey: .orderTransactionId)
        try container.encodeIfPresent(secondaryOrderTransactionId, forKey: .secondaryOrderTransactionId)
    }
}

