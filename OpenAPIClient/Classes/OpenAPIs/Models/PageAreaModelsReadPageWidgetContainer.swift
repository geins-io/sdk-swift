//
// PageAreaModelsReadPageWidgetContainer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This class represents a collection of widgets, and defines how they should be layouted in the area they are rendered in. */
public struct PageAreaModelsReadPageWidgetContainer: Codable, JSONEncodable, Hashable {

    /** The primary ID of this container */
    public var id: Int?
    /** The descriptive user defined name of this container, which is used to distinguish this container in a container library */
    public var name: String?
    /** The CSS class names this container should use. */
    public var classNames: [String]?
    public var active: Bool?
    public var layout: String?
    public var responsiveMode: String?
    public var visibility: String?
    public var design: String?
    /** The configured widgets held by this container */
    public var widgets: [PageAreaModelsReadPageWidget]?

    public init(id: Int? = nil, name: String? = nil, classNames: [String]? = nil, active: Bool? = nil, layout: String? = nil, responsiveMode: String? = nil, visibility: String? = nil, design: String? = nil, widgets: [PageAreaModelsReadPageWidget]? = nil) {
        self.id = id
        self.name = name
        self.classNames = classNames
        self.active = active
        self.layout = layout
        self.responsiveMode = responsiveMode
        self.visibility = visibility
        self.design = design
        self.widgets = widgets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case name = "Name"
        case classNames = "ClassNames"
        case active = "Active"
        case layout = "Layout"
        case responsiveMode = "ResponsiveMode"
        case visibility = "Visibility"
        case design = "Design"
        case widgets = "Widgets"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(classNames, forKey: .classNames)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(layout, forKey: .layout)
        try container.encodeIfPresent(responsiveMode, forKey: .responsiveMode)
        try container.encodeIfPresent(visibility, forKey: .visibility)
        try container.encodeIfPresent(design, forKey: .design)
        try container.encodeIfPresent(widgets, forKey: .widgets)
    }
}

