//
// PageAreaModelsReadPageWidget.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The API-representation of page widgets */
public struct PageAreaModelsReadPageWidget: Codable, JSONEncodable, Hashable {

    /** The IDs of widgets are immutable (determined by each view model implementation, in the namespace Carismar.Core) */
    public var id: UUID?
    /** The static name of this widget. Used to translate into icons, or to append to css-classes. */
    public var name: String?
    /** The name of the widget-type */
    public var type: String?
    /** Decides if this {PageArea.Models.Read.PageWidget} is active or not */
    public var active: Bool?
    /** Holds all CSS Class names that this widget should render */
    public var classNames: [String]?
    /** The fractional size for this widget in it's container. */
    public var size: String?
    /** The configuration for this {PageArea.Models.Read.PageWidget} */
    public var configuration: String?

    public init(id: UUID? = nil, name: String? = nil, type: String? = nil, active: Bool? = nil, classNames: [String]? = nil, size: String? = nil, configuration: String? = nil) {
        self.id = id
        self.name = name
        self.type = type
        self.active = active
        self.classNames = classNames
        self.size = size
        self.configuration = configuration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case name = "Name"
        case type = "Type"
        case active = "Active"
        case classNames = "ClassNames"
        case size = "Size"
        case configuration = "Configuration"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(classNames, forKey: .classNames)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(configuration, forKey: .configuration)
    }
}

