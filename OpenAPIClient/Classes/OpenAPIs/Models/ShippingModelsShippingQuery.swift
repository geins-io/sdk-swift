//
// ShippingModelsShippingQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A query to filter shipping options by. */
public struct ShippingModelsShippingQuery: Codable, JSONEncodable, Hashable {

    /** The site ID the delivery options belong to. Required. */
    public var siteId: Int?
    /** The country ID where the order should be shipped to. */
    public var countryId: Int?
    /** Carismar Shipping Option ID */
    public var shippingId: Int?
    /** Unifaun Delivery Option ID */
    public var deliveryOptionId: UUID?
    public var order: OrderCheckoutOrder?
    /** The cart sum limit for free shipping - to be used for conditions in the delivery checkout portal */
    public var minimumFreeShippingLimit: Double?

    public init(siteId: Int? = nil, countryId: Int? = nil, shippingId: Int? = nil, deliveryOptionId: UUID? = nil, order: OrderCheckoutOrder? = nil, minimumFreeShippingLimit: Double? = nil) {
        self.siteId = siteId
        self.countryId = countryId
        self.shippingId = shippingId
        self.deliveryOptionId = deliveryOptionId
        self.order = order
        self.minimumFreeShippingLimit = minimumFreeShippingLimit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case siteId = "SiteId"
        case countryId = "CountryId"
        case shippingId = "ShippingId"
        case deliveryOptionId = "DeliveryOptionId"
        case order = "Order"
        case minimumFreeShippingLimit = "MinimumFreeShippingLimit"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(shippingId, forKey: .shippingId)
        try container.encodeIfPresent(deliveryOptionId, forKey: .deliveryOptionId)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(minimumFreeShippingLimit, forKey: .minimumFreeShippingLimit)
    }
}

