//
// SupplierModelsReadSupplier.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A product supplier. */
public struct SupplierModelsReadSupplier: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the supplier. */
    public var supplierId: Int?
    /** The name of the supplier. */
    public var name: String?
    /** The first address line of the supplier. */
    public var address1: String?
    /** The second address line of the supplier. */
    public var address2: String?
    /** The third address line of the supplier. */
    public var address3: String?
    /** The zip code of the supplier. */
    public var zipCode: String?
    /** The country of the supplier. */
    public var country: String?
    /** The contact person of the supplier. */
    public var contactPerson: String?
    /** The primary phone number of the supplier. */
    public var phone1: String?
    /** The secondary phone number of the supplier. */
    public var phone2: String?
    /** The email address of the supplier. */
    public var email: String?
    /** External Id of the supplier. */
    public var externalId: String?

    public init(supplierId: Int? = nil, name: String? = nil, address1: String? = nil, address2: String? = nil, address3: String? = nil, zipCode: String? = nil, country: String? = nil, contactPerson: String? = nil, phone1: String? = nil, phone2: String? = nil, email: String? = nil, externalId: String? = nil) {
        self.supplierId = supplierId
        self.name = name
        self.address1 = address1
        self.address2 = address2
        self.address3 = address3
        self.zipCode = zipCode
        self.country = country
        self.contactPerson = contactPerson
        self.phone1 = phone1
        self.phone2 = phone2
        self.email = email
        self.externalId = externalId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case supplierId = "SupplierId"
        case name = "Name"
        case address1 = "Address1"
        case address2 = "Address2"
        case address3 = "Address3"
        case zipCode = "ZipCode"
        case country = "Country"
        case contactPerson = "ContactPerson"
        case phone1 = "Phone1"
        case phone2 = "Phone2"
        case email = "Email"
        case externalId = "ExternalId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(supplierId, forKey: .supplierId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(address3, forKey: .address3)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(contactPerson, forKey: .contactPerson)
        try container.encodeIfPresent(phone1, forKey: .phone1)
        try container.encodeIfPresent(phone2, forKey: .phone2)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(externalId, forKey: .externalId)
    }
}

