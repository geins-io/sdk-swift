//
// PriceListModelsWritePriceListPrice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A price for a product on a specific price list. */
public struct PriceListModelsWritePriceListPrice: Codable, JSONEncodable, Hashable {

    /** The price list id. */
    public var priceListId: Int?
    /** The price in the currency of the associated price list. */
    public var price: Double?
    /** The id of the product that this price applies to. */
    public var productId: String?
    /** The 3-letter ISO 4217 currency code for this price. If ommitted the price will be updated on the default market. */
    public var currency: String?
    /** Staggered count for this price. Defaults to 1. */
    public var staggeredCount: Int?

    public init(priceListId: Int? = nil, price: Double? = nil, productId: String? = nil, currency: String? = nil, staggeredCount: Int? = nil) {
        self.priceListId = priceListId
        self.price = price
        self.productId = productId
        self.currency = currency
        self.staggeredCount = staggeredCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case priceListId = "PriceListId"
        case price = "Price"
        case productId = "ProductId"
        case currency = "Currency"
        case staggeredCount = "StaggeredCount"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(priceListId, forKey: .priceListId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(staggeredCount, forKey: .staggeredCount)
    }
}

