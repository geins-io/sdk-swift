//
// OrderCaptureRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderCaptureRow: Codable, JSONEncodable, Hashable {

    public var orderRowId: Int?
    public var itemId: Int?
    public var productId: Int?
    public var price: Double?
    public var priceExVat: Double?
    public var name: String?
    public var productName: String?
    public var variant: String?
    public var brand: String?

    public init(orderRowId: Int? = nil, itemId: Int? = nil, productId: Int? = nil, price: Double? = nil, priceExVat: Double? = nil, name: String? = nil, productName: String? = nil, variant: String? = nil, brand: String? = nil) {
        self.orderRowId = orderRowId
        self.itemId = itemId
        self.productId = productId
        self.price = price
        self.priceExVat = priceExVat
        self.name = name
        self.productName = productName
        self.variant = variant
        self.brand = brand
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderRowId = "OrderRowId"
        case itemId = "ItemId"
        case productId = "ProductId"
        case price = "Price"
        case priceExVat = "PriceExVat"
        case name = "Name"
        case productName = "ProductName"
        case variant = "Variant"
        case brand = "Brand"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orderRowId, forKey: .orderRowId)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(priceExVat, forKey: .priceExVat)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(variant, forKey: .variant)
        try container.encodeIfPresent(brand, forKey: .brand)
    }
}

