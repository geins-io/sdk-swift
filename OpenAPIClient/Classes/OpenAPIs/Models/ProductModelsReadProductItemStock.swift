//
// ProductModelsReadProductItemStock.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A stock value for a product item */
public struct ProductModelsReadProductItemStock: Codable, JSONEncodable, Hashable {

    /** A value to uniquely identity a single product item. */
    public var itemId: Int?
    /** The physical stock value. */
    public var stock: Int?
    /** The oversellable stock value. */
    public var stockOversellable: Int?
    /** The static stock value. */
    public var stockStatic: Int?
    /** The sellable stock value. */
    public var stockSellable: Int?

    public init(itemId: Int? = nil, stock: Int? = nil, stockOversellable: Int? = nil, stockStatic: Int? = nil, stockSellable: Int? = nil) {
        self.itemId = itemId
        self.stock = stock
        self.stockOversellable = stockOversellable
        self.stockStatic = stockStatic
        self.stockSellable = stockSellable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case itemId = "ItemId"
        case stock = "Stock"
        case stockOversellable = "StockOversellable"
        case stockStatic = "StockStatic"
        case stockSellable = "StockSellable"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(stock, forKey: .stock)
        try container.encodeIfPresent(stockOversellable, forKey: .stockOversellable)
        try container.encodeIfPresent(stockStatic, forKey: .stockStatic)
        try container.encodeIfPresent(stockSellable, forKey: .stockSellable)
    }
}

