//
// PageResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Contains pagination information for paged operations, i.e. PageSize and PageCount. */
public struct PageResult: Codable, JSONEncodable, Hashable {

    /** The id of the batch operation. If this property has a value for the first fetched page it has to be passed as a parameter for all subsequent requests- */
    public var batchId: UUID?
    /** The current page */
    public var page: Int?
    /** Total number of rows */
    public var rowCount: Int?
    /** Total number of pages */
    public var pageCount: Int?
    /** Page size */
    public var pageSize: Int?
    /** True if there is more content to fetch. */
    public var hasMoreRows: Bool?

    public init(batchId: UUID? = nil, page: Int? = nil, rowCount: Int? = nil, pageCount: Int? = nil, pageSize: Int? = nil, hasMoreRows: Bool? = nil) {
        self.batchId = batchId
        self.page = page
        self.rowCount = rowCount
        self.pageCount = pageCount
        self.pageSize = pageSize
        self.hasMoreRows = hasMoreRows
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case batchId = "BatchId"
        case page = "Page"
        case rowCount = "RowCount"
        case pageCount = "PageCount"
        case pageSize = "PageSize"
        case hasMoreRows = "HasMoreRows"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(page, forKey: .page)
        try container.encodeIfPresent(rowCount, forKey: .rowCount)
        try container.encodeIfPresent(pageCount, forKey: .pageCount)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(hasMoreRows, forKey: .hasMoreRows)
    }
}

