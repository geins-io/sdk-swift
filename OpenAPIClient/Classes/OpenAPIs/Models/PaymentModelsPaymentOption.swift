//
// PaymentModelsPaymentOption.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PaymentModelsPaymentOption: Codable, JSONEncodable, Hashable {

    public var paymentId: Int?
    public var paymentGroupId: Int?
    public var name: String?
    public var displayName: String?
    public var fee: Double?
    public var icon: String?
    public var sort: Int?
    public var period: Int?
    public var termsLink: String?
    public var infoLink: String?
    public var personalIdRequired: Bool?
    public var registeredAddressRequired: Bool?
    public var houseNumberRequired: Bool?
    public var houseExtensionShown: Bool?
    public var genderRequired: Bool?
    public var birthdateRequired: Bool?

    public init(paymentId: Int? = nil, paymentGroupId: Int? = nil, name: String? = nil, displayName: String? = nil, fee: Double? = nil, icon: String? = nil, sort: Int? = nil, period: Int? = nil, termsLink: String? = nil, infoLink: String? = nil, personalIdRequired: Bool? = nil, registeredAddressRequired: Bool? = nil, houseNumberRequired: Bool? = nil, houseExtensionShown: Bool? = nil, genderRequired: Bool? = nil, birthdateRequired: Bool? = nil) {
        self.paymentId = paymentId
        self.paymentGroupId = paymentGroupId
        self.name = name
        self.displayName = displayName
        self.fee = fee
        self.icon = icon
        self.sort = sort
        self.period = period
        self.termsLink = termsLink
        self.infoLink = infoLink
        self.personalIdRequired = personalIdRequired
        self.registeredAddressRequired = registeredAddressRequired
        self.houseNumberRequired = houseNumberRequired
        self.houseExtensionShown = houseExtensionShown
        self.genderRequired = genderRequired
        self.birthdateRequired = birthdateRequired
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case paymentId = "PaymentId"
        case paymentGroupId = "PaymentGroupId"
        case name = "Name"
        case displayName = "DisplayName"
        case fee = "Fee"
        case icon = "Icon"
        case sort = "Sort"
        case period = "Period"
        case termsLink = "TermsLink"
        case infoLink = "InfoLink"
        case personalIdRequired = "PersonalIdRequired"
        case registeredAddressRequired = "RegisteredAddressRequired"
        case houseNumberRequired = "HouseNumberRequired"
        case houseExtensionShown = "HouseExtensionShown"
        case genderRequired = "GenderRequired"
        case birthdateRequired = "BirthdateRequired"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(paymentGroupId, forKey: .paymentGroupId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(fee, forKey: .fee)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(sort, forKey: .sort)
        try container.encodeIfPresent(period, forKey: .period)
        try container.encodeIfPresent(termsLink, forKey: .termsLink)
        try container.encodeIfPresent(infoLink, forKey: .infoLink)
        try container.encodeIfPresent(personalIdRequired, forKey: .personalIdRequired)
        try container.encodeIfPresent(registeredAddressRequired, forKey: .registeredAddressRequired)
        try container.encodeIfPresent(houseNumberRequired, forKey: .houseNumberRequired)
        try container.encodeIfPresent(houseExtensionShown, forKey: .houseExtensionShown)
        try container.encodeIfPresent(genderRequired, forKey: .genderRequired)
        try container.encodeIfPresent(birthdateRequired, forKey: .birthdateRequired)
    }
}

