//
// OrderValidateOrderCreationRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderValidateOrderCreationRequest: Codable, JSONEncodable, Hashable {

    public var orderId: Int?
    public var userId: Int?
    public var email: String?
    public var phone: String?
    public var currency: String?
    public var sumIncVat: Double?
    public var balanceIncVat: Double?
    public var items: [OrderValidateOrderCreationRequestStockItem]?

    public init(orderId: Int? = nil, userId: Int? = nil, email: String? = nil, phone: String? = nil, currency: String? = nil, sumIncVat: Double? = nil, balanceIncVat: Double? = nil, items: [OrderValidateOrderCreationRequestStockItem]? = nil) {
        self.orderId = orderId
        self.userId = userId
        self.email = email
        self.phone = phone
        self.currency = currency
        self.sumIncVat = sumIncVat
        self.balanceIncVat = balanceIncVat
        self.items = items
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderId = "OrderId"
        case userId = "UserId"
        case email = "Email"
        case phone = "Phone"
        case currency = "Currency"
        case sumIncVat = "SumIncVat"
        case balanceIncVat = "BalanceIncVat"
        case items = "Items"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(sumIncVat, forKey: .sumIncVat)
        try container.encodeIfPresent(balanceIncVat, forKey: .balanceIncVat)
        try container.encodeIfPresent(items, forKey: .items)
    }
}

