//
// ProductModelsReadProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A product. */
public struct ProductModelsReadProduct: Codable, JSONEncodable, Hashable {

    /** The unique identifier for the product. */
    public var productId: Int?
    /** The article number of the product. */
    public var articleNumber: String?
    /** The localized names of the product. */
    public var names: [SharedModelsLocalizableContent]?
    /** The date the product was created. */
    public var dateCreated: Date?
    /** The date the product was last updated. */
    public var dateUpdated: Date?
    /** The current state of the product. */
    public var active: Bool?
    /** The purchase price in the currency defined in {Product.Models.Read.Product.PurchasePriceCurrency}. */
    public var purchasePrice: Double?
    /** The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Read.Product.PurchasePrice}. */
    public var purchasePriceCurrency: String?
    /** Localized short texts for the product. */
    public var shortTexts: [SharedModelsLocalizableContent]?
    /** Localized long texts for the product. */
    public var longTexts: [SharedModelsLocalizableContent]?
    /** Localized tech texts for the product. */
    public var techTexts: [SharedModelsLocalizableContent]?
    /** The items belonging to the product. */
    public var items: [ProductModelsReadProductItem]?
    /** The current prices of the product. */
    public var prices: [PriceListModelsReadPriceListPrice]?
    /** The categories the product belongs to. */
    public var categories: [CategoryModelsReadCategory]?
    /** The images for the product */
    public var images: [ProductModelsReadImage]?
    /** The brand id of the product. */
    public var brandId: Int?
    /** The brand name of the product. */
    public var brandName: String?
    /** The supplier id of the product. */
    public var supplierId: Int?
    /** The supplier name of the product. */
    public var supplierName: String?
    /** The parameter values associated with the product. */
    public var parameterValues: [ProductParameterModelsReadProductParameterValue]?
    /** The variants for this product. */
    public var variants: [VariantModelsReadVariant]?
    /** The markets for this product */
    public var markets: [MarketModelsMarket]?
    /** The vat percent for this product. Eg) 0.25 meaning 25% VAT. */
    public var vat: Double?
    /** The filename of this products primary image. */
    public var primaryImage: String?
    /** ID of freight class */
    public var freightClassId: Int?
    /** Intrastat code of the product */
    public var intrastatCode: String?
    /** Country of orgin of product */
    public var countryOfOrigin: String?
    /** ID of Variant Group to which the product is associated */
    public var variantGroupId: Int?
    /** ID of Vat */
    public var vatId: Int?
    /** External Id of the product. */
    public var externalId: String?
    /** Activation date for the product. */
    public var activationDate: Date?
    /** The feeds the product is a member of */
    public var feeds: [ProductModelsReadFeedMembership]?
    /** All canonical urls for the product */
    public var urls: [ProductModelsReadProductUrl]?
    /** The main category id for the product. */
    public var mainCategoryId: Int?
    /** The related products for the product. */
    public var relatedProducts: [ProductModelsReadRelatedProduct]?

    public init(productId: Int? = nil, articleNumber: String? = nil, names: [SharedModelsLocalizableContent]? = nil, dateCreated: Date? = nil, dateUpdated: Date? = nil, active: Bool? = nil, purchasePrice: Double? = nil, purchasePriceCurrency: String? = nil, shortTexts: [SharedModelsLocalizableContent]? = nil, longTexts: [SharedModelsLocalizableContent]? = nil, techTexts: [SharedModelsLocalizableContent]? = nil, items: [ProductModelsReadProductItem]? = nil, prices: [PriceListModelsReadPriceListPrice]? = nil, categories: [CategoryModelsReadCategory]? = nil, images: [ProductModelsReadImage]? = nil, brandId: Int? = nil, brandName: String? = nil, supplierId: Int? = nil, supplierName: String? = nil, parameterValues: [ProductParameterModelsReadProductParameterValue]? = nil, variants: [VariantModelsReadVariant]? = nil, markets: [MarketModelsMarket]? = nil, vat: Double? = nil, primaryImage: String? = nil, freightClassId: Int? = nil, intrastatCode: String? = nil, countryOfOrigin: String? = nil, variantGroupId: Int? = nil, vatId: Int? = nil, externalId: String? = nil, activationDate: Date? = nil, feeds: [ProductModelsReadFeedMembership]? = nil, urls: [ProductModelsReadProductUrl]? = nil, mainCategoryId: Int? = nil, relatedProducts: [ProductModelsReadRelatedProduct]? = nil) {
        self.productId = productId
        self.articleNumber = articleNumber
        self.names = names
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.active = active
        self.purchasePrice = purchasePrice
        self.purchasePriceCurrency = purchasePriceCurrency
        self.shortTexts = shortTexts
        self.longTexts = longTexts
        self.techTexts = techTexts
        self.items = items
        self.prices = prices
        self.categories = categories
        self.images = images
        self.brandId = brandId
        self.brandName = brandName
        self.supplierId = supplierId
        self.supplierName = supplierName
        self.parameterValues = parameterValues
        self.variants = variants
        self.markets = markets
        self.vat = vat
        self.primaryImage = primaryImage
        self.freightClassId = freightClassId
        self.intrastatCode = intrastatCode
        self.countryOfOrigin = countryOfOrigin
        self.variantGroupId = variantGroupId
        self.vatId = vatId
        self.externalId = externalId
        self.activationDate = activationDate
        self.feeds = feeds
        self.urls = urls
        self.mainCategoryId = mainCategoryId
        self.relatedProducts = relatedProducts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case productId = "ProductId"
        case articleNumber = "ArticleNumber"
        case names = "Names"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case active = "Active"
        case purchasePrice = "PurchasePrice"
        case purchasePriceCurrency = "PurchasePriceCurrency"
        case shortTexts = "ShortTexts"
        case longTexts = "LongTexts"
        case techTexts = "TechTexts"
        case items = "Items"
        case prices = "Prices"
        case categories = "Categories"
        case images = "Images"
        case brandId = "BrandId"
        case brandName = "BrandName"
        case supplierId = "SupplierId"
        case supplierName = "SupplierName"
        case parameterValues = "ParameterValues"
        case variants = "Variants"
        case markets = "Markets"
        case vat = "Vat"
        case primaryImage = "PrimaryImage"
        case freightClassId = "FreightClassId"
        case intrastatCode = "IntrastatCode"
        case countryOfOrigin = "CountryOfOrigin"
        case variantGroupId = "VariantGroupId"
        case vatId = "VatId"
        case externalId = "ExternalId"
        case activationDate = "ActivationDate"
        case feeds = "Feeds"
        case urls = "Urls"
        case mainCategoryId = "MainCategoryId"
        case relatedProducts = "RelatedProducts"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(articleNumber, forKey: .articleNumber)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateUpdated, forKey: .dateUpdated)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(purchasePrice, forKey: .purchasePrice)
        try container.encodeIfPresent(purchasePriceCurrency, forKey: .purchasePriceCurrency)
        try container.encodeIfPresent(shortTexts, forKey: .shortTexts)
        try container.encodeIfPresent(longTexts, forKey: .longTexts)
        try container.encodeIfPresent(techTexts, forKey: .techTexts)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(prices, forKey: .prices)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(brandId, forKey: .brandId)
        try container.encodeIfPresent(brandName, forKey: .brandName)
        try container.encodeIfPresent(supplierId, forKey: .supplierId)
        try container.encodeIfPresent(supplierName, forKey: .supplierName)
        try container.encodeIfPresent(parameterValues, forKey: .parameterValues)
        try container.encodeIfPresent(variants, forKey: .variants)
        try container.encodeIfPresent(markets, forKey: .markets)
        try container.encodeIfPresent(vat, forKey: .vat)
        try container.encodeIfPresent(primaryImage, forKey: .primaryImage)
        try container.encodeIfPresent(freightClassId, forKey: .freightClassId)
        try container.encodeIfPresent(intrastatCode, forKey: .intrastatCode)
        try container.encodeIfPresent(countryOfOrigin, forKey: .countryOfOrigin)
        try container.encodeIfPresent(variantGroupId, forKey: .variantGroupId)
        try container.encodeIfPresent(vatId, forKey: .vatId)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(activationDate, forKey: .activationDate)
        try container.encodeIfPresent(feeds, forKey: .feeds)
        try container.encodeIfPresent(urls, forKey: .urls)
        try container.encodeIfPresent(mainCategoryId, forKey: .mainCategoryId)
        try container.encodeIfPresent(relatedProducts, forKey: .relatedProducts)
    }
}

