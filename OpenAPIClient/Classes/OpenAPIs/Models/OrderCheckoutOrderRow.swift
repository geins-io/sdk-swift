//
// OrderCheckoutOrderRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderCheckoutOrderRow: Codable, JSONEncodable, Hashable {

    public var sku: String?
    public var productId: Int?
    public var externalId: String?
    public var discountRate: Double?
    public var cartRowId: Int?
    public var productContainerBuildId: Int?
    public var message: String?
    public var articleNumber: String?
    public var gtin: String?
    public var brand: String?
    public var categories: [String]?
    public var name: String?
    public var variant: String?
    public var quantity: Int?
    public var priceIncVat: Double?
    public var priceExVat: Double?
    public var expectedTotalPriceIncVat: Double?
    public var discountIncVat: Double?
    public var discountExVat: Double?
    public var expectedTotalDiscountIncVat: Double?
    public var productUrl: String?
    public var imageUrl: String?
    public var weight: Int?
    public var height: Int?
    public var width: Int?
    public var length: Int?
    public var campaignIds: [String]?
    public var campaignGroupData: String?
    public var campaignNames: [String]?
    public var productPriceCampaignId: Int?
    public var productPriceListId: Int?

    public init(sku: String? = nil, productId: Int? = nil, externalId: String? = nil, discountRate: Double? = nil, cartRowId: Int? = nil, productContainerBuildId: Int? = nil, message: String? = nil, articleNumber: String? = nil, gtin: String? = nil, brand: String? = nil, categories: [String]? = nil, name: String? = nil, variant: String? = nil, quantity: Int? = nil, priceIncVat: Double? = nil, priceExVat: Double? = nil, expectedTotalPriceIncVat: Double? = nil, discountIncVat: Double? = nil, discountExVat: Double? = nil, expectedTotalDiscountIncVat: Double? = nil, productUrl: String? = nil, imageUrl: String? = nil, weight: Int? = nil, height: Int? = nil, width: Int? = nil, length: Int? = nil, campaignIds: [String]? = nil, campaignGroupData: String? = nil, campaignNames: [String]? = nil, productPriceCampaignId: Int? = nil, productPriceListId: Int? = nil) {
        self.sku = sku
        self.productId = productId
        self.externalId = externalId
        self.discountRate = discountRate
        self.cartRowId = cartRowId
        self.productContainerBuildId = productContainerBuildId
        self.message = message
        self.articleNumber = articleNumber
        self.gtin = gtin
        self.brand = brand
        self.categories = categories
        self.name = name
        self.variant = variant
        self.quantity = quantity
        self.priceIncVat = priceIncVat
        self.priceExVat = priceExVat
        self.expectedTotalPriceIncVat = expectedTotalPriceIncVat
        self.discountIncVat = discountIncVat
        self.discountExVat = discountExVat
        self.expectedTotalDiscountIncVat = expectedTotalDiscountIncVat
        self.productUrl = productUrl
        self.imageUrl = imageUrl
        self.weight = weight
        self.height = height
        self.width = width
        self.length = length
        self.campaignIds = campaignIds
        self.campaignGroupData = campaignGroupData
        self.campaignNames = campaignNames
        self.productPriceCampaignId = productPriceCampaignId
        self.productPriceListId = productPriceListId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sku = "Sku"
        case productId = "ProductId"
        case externalId = "ExternalId"
        case discountRate = "DiscountRate"
        case cartRowId = "CartRowId"
        case productContainerBuildId = "ProductContainerBuildId"
        case message = "Message"
        case articleNumber = "ArticleNumber"
        case gtin = "Gtin"
        case brand = "Brand"
        case categories = "Categories"
        case name = "Name"
        case variant = "Variant"
        case quantity = "Quantity"
        case priceIncVat = "PriceIncVat"
        case priceExVat = "PriceExVat"
        case expectedTotalPriceIncVat = "ExpectedTotalPriceIncVat"
        case discountIncVat = "DiscountIncVat"
        case discountExVat = "DiscountExVat"
        case expectedTotalDiscountIncVat = "ExpectedTotalDiscountIncVat"
        case productUrl = "ProductUrl"
        case imageUrl = "ImageUrl"
        case weight = "Weight"
        case height = "Height"
        case width = "Width"
        case length = "Length"
        case campaignIds = "CampaignIds"
        case campaignGroupData = "CampaignGroupData"
        case campaignNames = "CampaignNames"
        case productPriceCampaignId = "ProductPriceCampaignId"
        case productPriceListId = "ProductPriceListId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(discountRate, forKey: .discountRate)
        try container.encodeIfPresent(cartRowId, forKey: .cartRowId)
        try container.encodeIfPresent(productContainerBuildId, forKey: .productContainerBuildId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(articleNumber, forKey: .articleNumber)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(variant, forKey: .variant)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(priceIncVat, forKey: .priceIncVat)
        try container.encodeIfPresent(priceExVat, forKey: .priceExVat)
        try container.encodeIfPresent(expectedTotalPriceIncVat, forKey: .expectedTotalPriceIncVat)
        try container.encodeIfPresent(discountIncVat, forKey: .discountIncVat)
        try container.encodeIfPresent(discountExVat, forKey: .discountExVat)
        try container.encodeIfPresent(expectedTotalDiscountIncVat, forKey: .expectedTotalDiscountIncVat)
        try container.encodeIfPresent(productUrl, forKey: .productUrl)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(campaignIds, forKey: .campaignIds)
        try container.encodeIfPresent(campaignGroupData, forKey: .campaignGroupData)
        try container.encodeIfPresent(campaignNames, forKey: .campaignNames)
        try container.encodeIfPresent(productPriceCampaignId, forKey: .productPriceCampaignId)
        try container.encodeIfPresent(productPriceListId, forKey: .productPriceListId)
    }
}

