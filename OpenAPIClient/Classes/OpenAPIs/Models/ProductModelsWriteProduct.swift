//
// ProductModelsWriteProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A product. */
public struct ProductModelsWriteProduct: Codable, JSONEncodable, Hashable {

    /** The article number of the product. */
    public var articleNumber: String?
    /** The localized names of the product. */
    public var names: [SharedModelsLocalizableContent]?
    /** The current state of the product. */
    public var active: Bool?
    /** The purchase price in the currency defined in {Product.Models.Write.Product.PurchasePriceCurrency}. */
    public var purchasePrice: Double?
    /** The 3-letter ISO 4217 currency code for the amount given in {Product.Models.Write.Product.PurchasePrice}. */
    public var purchasePriceCurrency: String?
    /** Localized short texts for the product. */
    public var shortTexts: [SharedModelsLocalizableContent]?
    /** Localized long texts for the product. */
    public var longTexts: [SharedModelsLocalizableContent]?
    /** Localized tech texts for the product. */
    public var techTexts: [SharedModelsLocalizableContent]?
    /** The brand of the product. */
    public var brandId: Int?
    /** The supplier id of the product. */
    public var supplierId: Int?
    /** The items belonging to the product. */
    public var items: [ProductModelsWriteProductItem]?
    /** The category ids the product belongs to. */
    public var categoryIds: [Int]?
    /** The parameter values associated with the product. */
    public var parameterValues: [ProductParameterModelsWriteProductParameterValue]?
    /** The variants for this product. */
    public var variants: [VariantModelsWriteVariant]?
    /** The markets for this product */
    public var markets: [MarketModelsMarket]?
    /** ID of freight class */
    public var freightClassId: Int?
    /** Intrastat code of the product */
    public var intrastatCode: String?
    /** Country of orgin of product */
    public var countryOfOrigin: String?
    /** ID of Variant Group to whom the product should be associated */
    public var variantGroupId: Int?
    /** ID or rate of VAT (On create and if no VAT is provided then default VAT will be used) */
    public var vat: Int?
    /** Defines how VAT parameter should be interpreted  Actual = VAT parameter is interpreted as VAT rate  VatId = VAT parameter is interpreted as VAT Id */
    public var vatType: String?
    /** External Id of the product. */
    public var externalId: String?
    /** Activation date for the product. */
    public var activationDate: Date?

    public init(articleNumber: String? = nil, names: [SharedModelsLocalizableContent]? = nil, active: Bool? = nil, purchasePrice: Double? = nil, purchasePriceCurrency: String? = nil, shortTexts: [SharedModelsLocalizableContent]? = nil, longTexts: [SharedModelsLocalizableContent]? = nil, techTexts: [SharedModelsLocalizableContent]? = nil, brandId: Int? = nil, supplierId: Int? = nil, items: [ProductModelsWriteProductItem]? = nil, categoryIds: [Int]? = nil, parameterValues: [ProductParameterModelsWriteProductParameterValue]? = nil, variants: [VariantModelsWriteVariant]? = nil, markets: [MarketModelsMarket]? = nil, freightClassId: Int? = nil, intrastatCode: String? = nil, countryOfOrigin: String? = nil, variantGroupId: Int? = nil, vat: Int? = nil, vatType: String? = nil, externalId: String? = nil, activationDate: Date? = nil) {
        self.articleNumber = articleNumber
        self.names = names
        self.active = active
        self.purchasePrice = purchasePrice
        self.purchasePriceCurrency = purchasePriceCurrency
        self.shortTexts = shortTexts
        self.longTexts = longTexts
        self.techTexts = techTexts
        self.brandId = brandId
        self.supplierId = supplierId
        self.items = items
        self.categoryIds = categoryIds
        self.parameterValues = parameterValues
        self.variants = variants
        self.markets = markets
        self.freightClassId = freightClassId
        self.intrastatCode = intrastatCode
        self.countryOfOrigin = countryOfOrigin
        self.variantGroupId = variantGroupId
        self.vat = vat
        self.vatType = vatType
        self.externalId = externalId
        self.activationDate = activationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case articleNumber = "ArticleNumber"
        case names = "Names"
        case active = "Active"
        case purchasePrice = "PurchasePrice"
        case purchasePriceCurrency = "PurchasePriceCurrency"
        case shortTexts = "ShortTexts"
        case longTexts = "LongTexts"
        case techTexts = "TechTexts"
        case brandId = "BrandId"
        case supplierId = "SupplierId"
        case items = "Items"
        case categoryIds = "CategoryIds"
        case parameterValues = "ParameterValues"
        case variants = "Variants"
        case markets = "Markets"
        case freightClassId = "FreightClassId"
        case intrastatCode = "IntrastatCode"
        case countryOfOrigin = "CountryOfOrigin"
        case variantGroupId = "VariantGroupId"
        case vat = "Vat"
        case vatType = "VatType"
        case externalId = "ExternalId"
        case activationDate = "ActivationDate"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(articleNumber, forKey: .articleNumber)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(purchasePrice, forKey: .purchasePrice)
        try container.encodeIfPresent(purchasePriceCurrency, forKey: .purchasePriceCurrency)
        try container.encodeIfPresent(shortTexts, forKey: .shortTexts)
        try container.encodeIfPresent(longTexts, forKey: .longTexts)
        try container.encodeIfPresent(techTexts, forKey: .techTexts)
        try container.encodeIfPresent(brandId, forKey: .brandId)
        try container.encodeIfPresent(supplierId, forKey: .supplierId)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(categoryIds, forKey: .categoryIds)
        try container.encodeIfPresent(parameterValues, forKey: .parameterValues)
        try container.encodeIfPresent(variants, forKey: .variants)
        try container.encodeIfPresent(markets, forKey: .markets)
        try container.encodeIfPresent(freightClassId, forKey: .freightClassId)
        try container.encodeIfPresent(intrastatCode, forKey: .intrastatCode)
        try container.encodeIfPresent(countryOfOrigin, forKey: .countryOfOrigin)
        try container.encodeIfPresent(variantGroupId, forKey: .variantGroupId)
        try container.encodeIfPresent(vat, forKey: .vat)
        try container.encodeIfPresent(vatType, forKey: .vatType)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(activationDate, forKey: .activationDate)
    }
}

