//
// OrderModelsShippingDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Data carrier for a shipping detail */
public struct OrderModelsShippingDetail: Codable, JSONEncodable, Hashable {

    /** Unique identifier for this shipping detail */
    public var id: Int?
    /** Id of the sipping method */
    public var shippingId: Int?
    /** Name of the shipping method */
    public var name: String?
    /** Parcel number (tracking number) */
    public var parcelNumber: String?
    /** Shipping date */
    public var shippingDate: Date?
    /** Tracking URL */
    public var trackingUrl: String?
    /** Delivery option id of the external shipping provider */
    public var externalDeliveryOptionId: String?
    /** Service id of the external shipping provider */
    public var externalServiceId: String?
    /** Carrier id of the external shipping provider */
    public var externalCarrierId: String?
    /** Pickup point */
    public var pickupPoint: String?

    public init(id: Int? = nil, shippingId: Int? = nil, name: String? = nil, parcelNumber: String? = nil, shippingDate: Date? = nil, trackingUrl: String? = nil, externalDeliveryOptionId: String? = nil, externalServiceId: String? = nil, externalCarrierId: String? = nil, pickupPoint: String? = nil) {
        self.id = id
        self.shippingId = shippingId
        self.name = name
        self.parcelNumber = parcelNumber
        self.shippingDate = shippingDate
        self.trackingUrl = trackingUrl
        self.externalDeliveryOptionId = externalDeliveryOptionId
        self.externalServiceId = externalServiceId
        self.externalCarrierId = externalCarrierId
        self.pickupPoint = pickupPoint
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case shippingId = "ShippingId"
        case name = "Name"
        case parcelNumber = "ParcelNumber"
        case shippingDate = "ShippingDate"
        case trackingUrl = "TrackingUrl"
        case externalDeliveryOptionId = "ExternalDeliveryOptionId"
        case externalServiceId = "ExternalServiceId"
        case externalCarrierId = "ExternalCarrierId"
        case pickupPoint = "PickupPoint"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shippingId, forKey: .shippingId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(parcelNumber, forKey: .parcelNumber)
        try container.encodeIfPresent(shippingDate, forKey: .shippingDate)
        try container.encodeIfPresent(trackingUrl, forKey: .trackingUrl)
        try container.encodeIfPresent(externalDeliveryOptionId, forKey: .externalDeliveryOptionId)
        try container.encodeIfPresent(externalServiceId, forKey: .externalServiceId)
        try container.encodeIfPresent(externalCarrierId, forKey: .externalCarrierId)
        try container.encodeIfPresent(pickupPoint, forKey: .pickupPoint)
    }
}

