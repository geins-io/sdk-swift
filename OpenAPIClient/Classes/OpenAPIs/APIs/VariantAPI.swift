//
// VariantAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VariantAPI {

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_addProductToVariantGroup: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Adds a product to an existing group
     
     - parameter groupId: (path) The ID of the group to which a product should be added 
     - parameter productId: (path) The ID of the product to be added to the target group. 
     - parameter variant: (body) The variant details. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addProductToVariantGroup(groupId: Int, productId: String, variant: [VariantModelsWriteVariant], productIdType: ProductIdType_addProductToVariantGroup? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return addProductToVariantGroupWithRequestBuilder(groupId: groupId, productId: productId, variant: variant, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds a product to an existing group
     - PUT /API/VariantGroup/{groupId}/{productId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter groupId: (path) The ID of the group to which a product should be added 
     - parameter productId: (path) The ID of the product to be added to the target group. 
     - parameter variant: (body) The variant details. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func addProductToVariantGroupWithRequestBuilder(groupId: Int, productId: String, variant: [VariantModelsWriteVariant], productIdType: ProductIdType_addProductToVariantGroup? = nil, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/VariantGroup/{groupId}/{productId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: variant)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_addProductToVariantGroupByProductId: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Adds a product to an existing group
     
     - parameter productId1: (path) The ID of a product belonging to the target group. 
     - parameter productId2: (path) The ID of the product to be added to the target group. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addProductToVariantGroupByProductId(productId1: String, productId2: String, productIdType: ProductIdType_addProductToVariantGroupByProductId? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return addProductToVariantGroupByProductIdWithRequestBuilder(productId1: productId1, productId2: productId2, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds a product to an existing group
     - PUT /API/Variant/{productId1}/{productId2}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId1: (path) The ID of a product belonging to the target group. 
     - parameter productId2: (path) The ID of the product to be added to the target group. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func addProductToVariantGroupByProductIdWithRequestBuilder(productId1: String, productId2: String, productIdType: ProductIdType_addProductToVariantGroupByProductId? = nil, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/Variant/{productId1}/{productId2}"
        let productId1PreEscape = "\(APIHelper.mapValueToPathItem(productId1))"
        let productId1PostEscape = productId1PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId1}", with: productId1PostEscape, options: .literal, range: nil)
        let productId2PreEscape = "\(APIHelper.mapValueToPathItem(productId2))"
        let productId2PostEscape = productId2PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId2}", with: productId2PostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new variant group
     
     - parameter variantGroup: (body) The settings for the new group. 
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createVariantGroup(variantGroup: VariantModelsWriteVariantGroup, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return createVariantGroupWithRequestBuilder(variantGroup: variantGroup, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new variant group
     - POST /API/VariantGroup
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter variantGroup: (body) The settings for the new group. 
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func createVariantGroupWithRequestBuilder(variantGroup: VariantModelsWriteVariantGroup, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        let localVariablePath = "/API/VariantGroup"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: variantGroup)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_createVariantGroupWithProduct: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Create a new group for the provided product id
     
     - parameter productId: (path) The id of the product, for which to create a group. 
     - parameter variantGroup: (body) The settings for the new group. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createVariantGroupWithProduct(productId: String, variantGroup: VariantModelsWriteVariantGroup, productIdType: ProductIdType_createVariantGroupWithProduct? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return createVariantGroupWithProductWithRequestBuilder(productId: productId, variantGroup: variantGroup, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new group for the provided product id
     - POST /API/Variant/{productId}/VariantGroup
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product, for which to create a group. 
     - parameter variantGroup: (body) The settings for the new group. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func createVariantGroupWithProductWithRequestBuilder(productId: String, variantGroup: VariantModelsWriteVariantGroup, productIdType: ProductIdType_createVariantGroupWithProduct? = nil, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/Variant/{productId}/VariantGroup"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: variantGroup)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an entire variant group
     
     - parameter groupId: (path) The ID of the group to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteVariantGroup(groupId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteVariantGroupWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an entire variant group
     - DELETE /API/VariantGroup/{groupId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter groupId: (path) The ID of the group to delete 
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func deleteVariantGroupWithRequestBuilder(groupId: Int) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/VariantGroup/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_deleteVariantGroupByProductId: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Delete an entire variant group
     
     - parameter productId: (path) The id of a product that belongs to the group to remove. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteVariantGroupByProductId(productId: String, productIdType: ProductIdType_deleteVariantGroupByProductId? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteVariantGroupByProductIdWithRequestBuilder(productId: productId, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an entire variant group
     - DELETE /API/Variant/{productId}/VariantGroup
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of a product that belongs to the group to remove. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - returns: RequestBuilder<Envelope> 
     */
    open class func deleteVariantGroupByProductIdWithRequestBuilder(productId: String, productIdType: ProductIdType_deleteVariantGroupByProductId? = nil) -> RequestBuilder<Envelope> {
        var localVariablePath = "/API/Variant/{productId}/VariantGroup"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a specific variant group
     
     - parameter groupId: (path) The ID of the group to get 
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVariantGroup(groupId: Int, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return getVariantGroupWithRequestBuilder(groupId: groupId, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific variant group
     - GET /API/VariantGroup/{groupId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter groupId: (path) The ID of the group to get 
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func getVariantGroupWithRequestBuilder(groupId: Int, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/VariantGroup/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_getVariantGroupByProductId: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Get the variant group for the provided id
     
     - parameter productId: (path) The id of the product, for which to get the group. 
     - parameter productIdType: (query) The type of id. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVariantGroupByProductId(productId: String, productIdType: ProductIdType_getVariantGroupByProductId? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return getVariantGroupByProductIdWithRequestBuilder(productId: productId, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the variant group for the provided id
     - GET /API/Variant/{productId}/VariantGroup
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product, for which to get the group. 
     - parameter productIdType: (query) The type of id. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func getVariantGroupByProductIdWithRequestBuilder(productId: String, productIdType: ProductIdType_getVariantGroupByProductId? = nil, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/Variant/{productId}/VariantGroup"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all valid variant labels
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVariantLabels(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeString?, _ error: Error?) -> Void)) -> RequestTask {
        return getVariantLabelsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all valid variant labels
     - GET /API/Variant/Labels
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<EnvelopeString> 
     */
    open class func getVariantLabelsWithRequestBuilder() -> RequestBuilder<EnvelopeString> {
        let localVariablePath = "/API/Variant/Labels"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_removeProductFromVariantGroup: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Remove a product from its variant group
     
     - parameter productId: (path) The id of the product to remove from group. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeProductFromVariantGroup(productId: String, productIdType: ProductIdType_removeProductFromVariantGroup? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return removeProductFromVariantGroupWithRequestBuilder(productId: productId, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a product from its variant group
     - DELETE /API/Variant/{productId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product to remove from group. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func removeProductFromVariantGroupWithRequestBuilder(productId: String, productIdType: ProductIdType_removeProductFromVariantGroup? = nil, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/Variant/{productId}"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_updateVariant: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Adds the variant details for the product with the provided ID
     
     - parameter productId: (path) The ID of the product for which to update the variant details. 
     - parameter variant: (body) The variant details. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateVariant(productId: String, variant: [VariantModelsWriteVariant], productIdType: ProductIdType_updateVariant? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariant?, _ error: Error?) -> Void)) -> RequestTask {
        return updateVariantWithRequestBuilder(productId: productId, variant: variant, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds the variant details for the product with the provided ID
     - PUT /API/Variant/{productId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The ID of the product for which to update the variant details. 
     - parameter variant: (body) The variant details. 
     - parameter productIdType: (query) The type of product id provided. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariant> 
     */
    open class func updateVariantWithRequestBuilder(productId: String, variant: [VariantModelsWriteVariant], productIdType: ProductIdType_updateVariant? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariant> {
        var localVariablePath = "/API/Variant/{productId}"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: variant)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariant>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates the settings of a group
     
     - parameter groupId: (path) The ID of the group to update 
     - parameter variantGroup: (body) The new settings for the group 
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateVariantGroup(groupId: Int, variantGroup: VariantModelsWriteVariantGroup, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeVariantModelsReadVariantGroup?, _ error: Error?) -> Void)) -> RequestTask {
        return updateVariantGroupWithRequestBuilder(groupId: groupId, variantGroup: variantGroup, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates the settings of a group
     - PUT /API/VariantGroup/{groupId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter groupId: (path) The ID of the group to update 
     - parameter variantGroup: (body) The new settings for the group 
     - parameter include: (query) Comma separated list of product child collections to also include with the variant group. Set to \&quot;product\&quot; to only include basic product data and to null (skip) to not include any product data. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeVariantModelsReadVariantGroup> 
     */
    open class func updateVariantGroupWithRequestBuilder(groupId: Int, variantGroup: VariantModelsWriteVariantGroup, include: String? = nil) -> RequestBuilder<EnvelopeVariantModelsReadVariantGroup> {
        var localVariablePath = "/API/VariantGroup/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: variantGroup)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeVariantModelsReadVariantGroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
