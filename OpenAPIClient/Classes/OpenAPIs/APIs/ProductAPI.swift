//
// ProductAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProductAPI {

    /**
     Add a product availability monitor
     
     - parameter model: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addAvailabilityMonitor(model: ProductModelsMonitorSku, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return addAvailabilityMonitorWithRequestBuilder(model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a product availability monitor
     - POST /API/Product/MonitorAvailability
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter model: (body)  
     - returns: RequestBuilder<Envelope> 
     */
    open class func addAvailabilityMonitorWithRequestBuilder(model: ProductModelsMonitorSku) -> RequestBuilder<Envelope> {
        let localVariablePath = "/API/Product/MonitorAvailability"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_addCategoryToProduct: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Adds a category relation to a product
     
     - parameter productId: (path) The id of the product to update. 
     - parameter productCategory: (body) The category to relate the product to. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addCategoryToProduct(productId: String, productCategory: ProductModelsProductCategory, productIdType: ProductIdType_addCategoryToProduct? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return addCategoryToProductWithRequestBuilder(productId: productId, productCategory: productCategory, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds a category relation to a product
     - PUT /API/Product/{productId}/Category
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product to update. 
     - parameter productCategory: (body) The category to relate the product to. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - returns: RequestBuilder<Envelope> 
     */
    open class func addCategoryToProductWithRequestBuilder(productId: String, productCategory: ProductModelsProductCategory, productIdType: ProductIdType_addCategoryToProduct? = nil) -> RequestBuilder<Envelope> {
        var localVariablePath = "/API/Product/{productId}/Category"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productCategory)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_addImageToProduct: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Adds an image relation to a product
     
     - parameter productId: (path) The id of the product to update. 
     - parameter imageName: (path) The name of the image to set to product. 
     - parameter isPrimaryImage: (query) Specifies whether {imageName} should be set as the primary image of the product. (optional)
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addImageToProduct(productId: String, imageName: String, isPrimaryImage: Bool? = nil, productIdType: ProductIdType_addImageToProduct? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return addImageToProductWithRequestBuilder(productId: productId, imageName: imageName, isPrimaryImage: isPrimaryImage, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds an image relation to a product
     - PUT /API/Product/{productId}/Image/{imageName}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product to update. 
     - parameter imageName: (path) The name of the image to set to product. 
     - parameter isPrimaryImage: (query) Specifies whether {imageName} should be set as the primary image of the product. (optional)
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - returns: RequestBuilder<Envelope> 
     */
    open class func addImageToProductWithRequestBuilder(productId: String, imageName: String, isPrimaryImage: Bool? = nil, productIdType: ProductIdType_addImageToProduct? = nil) -> RequestBuilder<Envelope> {
        var localVariablePath = "/API/Product/{productId}/Image/{imageName}"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let imageNamePreEscape = "\(APIHelper.mapValueToPathItem(imageName))"
        let imageNamePostEscape = imageNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{imageName}", with: imageNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "isPrimaryImage": (wrappedValue: isPrimaryImage?.encodeToJSON(), isExplode: true),
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_addRelatedProductsToProduct: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Add related products to a product
     
     - parameter productId: (path) The id of the main product to which the relations will be created 
     - parameter relatedProducts: (body) The list of related products to link with the main product. 
     - parameter productIdType: (query) The type of product id for {productId} and supplied in {relatedProducts}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addRelatedProductsToProduct(productId: String, relatedProducts: [ProductModelsWriteRelatedProduct], productIdType: ProductIdType_addRelatedProductsToProduct? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductModelsRelatedProductEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return addRelatedProductsToProductWithRequestBuilder(productId: productId, relatedProducts: relatedProducts, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add related products to a product
     - PUT /API/Product/{productId}/Related
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the main product to which the relations will be created 
     - parameter relatedProducts: (body) The list of related products to link with the main product. 
     - parameter productIdType: (query) The type of product id for {productId} and supplied in {relatedProducts}. (optional)
     - returns: RequestBuilder<ProductModelsRelatedProductEnvelope> 
     */
    open class func addRelatedProductsToProductWithRequestBuilder(productId: String, relatedProducts: [ProductModelsWriteRelatedProduct], productIdType: ProductIdType_addRelatedProductsToProduct? = nil) -> RequestBuilder<ProductModelsRelatedProductEnvelope> {
        var localVariablePath = "/API/Product/{productId}/Related"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: relatedProducts)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductModelsRelatedProductEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productItemIdType
     */
    public enum ProductItemIdType_batchUpdateProductItems: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     Updates product items in batch
     
     - parameter productItems: (body) The product items to update 
     - parameter productItemIdType: (query) The type of product item id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchUpdateProductItems(productItems: [ProductModelsWriteProductItem], productItemIdType: ProductItemIdType_batchUpdateProductItems? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Envelope?, _ error: Error?) -> Void)) -> RequestTask {
        return batchUpdateProductItemsWithRequestBuilder(productItems: productItems, productItemIdType: productItemIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates product items in batch
     - PUT /API/Product/Items
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productItems: (body) The product items to update 
     - parameter productItemIdType: (query) The type of product item id (optional)
     - returns: RequestBuilder<Envelope> 
     */
    open class func batchUpdateProductItemsWithRequestBuilder(productItems: [ProductModelsWriteProductItem], productItemIdType: ProductItemIdType_batchUpdateProductItems? = nil) -> RequestBuilder<Envelope> {
        let localVariablePath = "/API/Product/Items"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productItems)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productItemIdType": (wrappedValue: productItemIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Envelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productItemIdType
     */
    public enum ProductItemIdType_batchUpdateStockValues: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     Update stock values for multiple product items
     
     - parameter productItemStocks: (body) List of product item ids with new stock values. 
     - parameter productItemIdType: (query) The type of product item id supplied in {productItemStocks}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchUpdateStockValues(productItemStocks: [ProductModelsWriteProductItemStock], productItemIdType: ProductItemIdType_batchUpdateStockValues? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductModelsStockEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return batchUpdateStockValuesWithRequestBuilder(productItemStocks: productItemStocks, productItemIdType: productItemIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update stock values for multiple product items
     - PUT /API/Product/Stock
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productItemStocks: (body) List of product item ids with new stock values. 
     - parameter productItemIdType: (query) The type of product item id supplied in {productItemStocks}. (optional)
     - returns: RequestBuilder<ProductModelsStockEnvelope> 
     */
    open class func batchUpdateStockValuesWithRequestBuilder(productItemStocks: [ProductModelsWriteProductItemStock], productItemIdType: ProductItemIdType_batchUpdateStockValues? = nil) -> RequestBuilder<ProductModelsStockEnvelope> {
        let localVariablePath = "/API/Product/Stock"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productItemStocks)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productItemIdType": (wrappedValue: productItemIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductModelsStockEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new product
     
     - parameter product: (body) The product to create. 
     - parameter include: (query) Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProduct(product: ProductModelsWriteProduct, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeProductModelsReadProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return createProductWithRequestBuilder(product: product, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new product
     - POST /API/Product
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (body) The product to create. 
     - parameter include: (query) Comma separated list of child-collections to also include with the created product. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeProductModelsReadProduct> 
     */
    open class func createProductWithRequestBuilder(product: ProductModelsWriteProduct, include: String? = nil) -> RequestBuilder<EnvelopeProductModelsReadProduct> {
        let localVariablePath = "/API/Product"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: product)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeProductModelsReadProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_createProductItems: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Create a new product item
     
     - parameter productId: (path) The id of the product to create an item on. 
     - parameter productItem: (body) The product item to create. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProductItems(productId: String, productItem: ProductModelsWriteProductItem, productIdType: ProductIdType_createProductItems? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeProductModelsReadProductItem?, _ error: Error?) -> Void)) -> RequestTask {
        return createProductItemsWithRequestBuilder(productId: productId, productItem: productItem, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new product item
     - POST /API/Product/{productId}/Item
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product to create an item on. 
     - parameter productItem: (body) The product item to create. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - returns: RequestBuilder<EnvelopeProductModelsReadProductItem> 
     */
    open class func createProductItemsWithRequestBuilder(productId: String, productItem: ProductModelsWriteProductItem, productIdType: ProductIdType_createProductItems? = nil) -> RequestBuilder<EnvelopeProductModelsReadProductItem> {
        var localVariablePath = "/API/Product/{productId}/Item"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productItem)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeProductModelsReadProductItem>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_getProductById: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Get a specific product
     
     - parameter productId: (path) The id of the product to get. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter include: (query) Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProductById(productId: String, productIdType: ProductIdType_getProductById? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeProductModelsReadProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return getProductByIdWithRequestBuilder(productId: productId, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific product
     - GET /API/Product/{productId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product to get. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter include: (query) Comma separated list of child-collections to also include with the requested product. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeProductModelsReadProduct> 
     */
    open class func getProductByIdWithRequestBuilder(productId: String, productIdType: ProductIdType_getProductById? = nil, include: String? = nil) -> RequestBuilder<EnvelopeProductModelsReadProduct> {
        var localVariablePath = "/API/Product/{productId}"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeProductModelsReadProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productItemIdType
     */
    public enum ProductItemIdType_getProductItemById: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     Get a specific product item
     
     - parameter itemId: (path) The id of the product item to get. 
     - parameter productItemIdType: (query) The type of product item id supplied in {itemId}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProductItemById(itemId: String, productItemIdType: ProductItemIdType_getProductItemById? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductProductItemEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return getProductItemByIdWithRequestBuilder(itemId: itemId, productItemIdType: productItemIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific product item
     - GET /API/Product/Item/{itemId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter itemId: (path) The id of the product item to get. 
     - parameter productItemIdType: (query) The type of product item id supplied in {itemId}. (optional)
     - returns: RequestBuilder<ProductProductItemEnvelope> 
     */
    open class func getProductItemByIdWithRequestBuilder(itemId: String, productItemIdType: ProductItemIdType_getProductItemById? = nil) -> RequestBuilder<ProductProductItemEnvelope> {
        var localVariablePath = "/API/Product/Item/{itemId}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productItemIdType": (wrappedValue: productItemIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductProductItemEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_linkRelatedProductsByRelationId: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Add related products to a product using a fixed relation type
     
     - parameter productId: (path) The id of the main product to which the relations will be created 
     - parameter relationTypeId: (path) The relation type id that will apply to all related products in {relatedProducts} 
     - parameter relatedProducts: (body) The list of related products to link with the main product. 
     - parameter productIdType: (query) The type of product id for {productId} and supplied in {relatedProducts}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func linkRelatedProductsByRelationId(productId: String, relationTypeId: Int, relatedProducts: [ProductModelsWriteRelatedProduct], productIdType: ProductIdType_linkRelatedProductsByRelationId? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProductModelsRelatedProductEnvelope?, _ error: Error?) -> Void)) -> RequestTask {
        return linkRelatedProductsByRelationIdWithRequestBuilder(productId: productId, relationTypeId: relationTypeId, relatedProducts: relatedProducts, productIdType: productIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add related products to a product using a fixed relation type
     - PUT /API/Product/{productId}/Related/{relationTypeId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the main product to which the relations will be created 
     - parameter relationTypeId: (path) The relation type id that will apply to all related products in {relatedProducts} 
     - parameter relatedProducts: (body) The list of related products to link with the main product. 
     - parameter productIdType: (query) The type of product id for {productId} and supplied in {relatedProducts}. (optional)
     - returns: RequestBuilder<ProductModelsRelatedProductEnvelope> 
     */
    open class func linkRelatedProductsByRelationIdWithRequestBuilder(productId: String, relationTypeId: Int, relatedProducts: [ProductModelsWriteRelatedProduct], productIdType: ProductIdType_linkRelatedProductsByRelationId? = nil) -> RequestBuilder<ProductModelsRelatedProductEnvelope> {
        var localVariablePath = "/API/Product/{productId}/Related/{relationTypeId}"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let relationTypeIdPreEscape = "\(APIHelper.mapValueToPathItem(relationTypeId))"
        let relationTypeIdPostEscape = relationTypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationTypeId}", with: relationTypeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: relatedProducts)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProductModelsRelatedProductEnvelope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all product items with pagination
     
     - parameter page: (path) The page to fetch 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAllProductItemsPaged(page: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeListProductModelsReadProductItem?, _ error: Error?) -> Void)) -> RequestTask {
        return listAllProductItemsPagedWithRequestBuilder(page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all product items with pagination
     - GET /API/Product/Items/{page}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter page: (path) The page to fetch 
     - returns: RequestBuilder<EnvelopeListProductModelsReadProductItem> 
     */
    open class func listAllProductItemsPagedWithRequestBuilder(page: Int) -> RequestBuilder<EnvelopeListProductModelsReadProductItem> {
        var localVariablePath = "/API/Product/Items/{page}"
        let pagePreEscape = "\(APIHelper.mapValueToPathItem(page))"
        let pagePostEscape = pagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{page}", with: pagePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeListProductModelsReadProductItem>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a list of all feeds
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listFeeds(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeListProductModelsReadFeed?, _ error: Error?) -> Void)) -> RequestTask {
        return listFeedsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of all feeds
     - GET /API/Product/Feeds
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<EnvelopeListProductModelsReadFeed> 
     */
    open class func listFeedsWithRequestBuilder() -> RequestBuilder<EnvelopeListProductModelsReadFeed> {
        let localVariablePath = "/API/Product/Feeds"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeListProductModelsReadFeed>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all product items
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listProductItems(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ProductModelsReadProductItem]?, _ error: Error?) -> Void)) -> RequestTask {
        return listProductItemsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all product items
     - GET /API/Product/Items
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<[ProductModelsReadProductItem]> 
     */
    open class func listProductItemsWithRequestBuilder() -> RequestBuilder<[ProductModelsReadProductItem]> {
        let localVariablePath = "/API/Product/Items"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProductModelsReadProductItem]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a list of product relation types
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listProductRelationTypes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeListProductModelsReadRelationType?, _ error: Error?) -> Void)) -> RequestTask {
        return listProductRelationTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of product relation types
     - GET /API/Product/RelationTypes
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<EnvelopeListProductModelsReadRelationType> 
     */
    open class func listProductRelationTypesWithRequestBuilder() -> RequestBuilder<EnvelopeListProductModelsReadRelationType> {
        let localVariablePath = "/API/Product/RelationTypes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeListProductModelsReadRelationType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Query products
     
     - parameter query: (body) The details of the query 
     - parameter include: (query) Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func queryProducts(query: ProductModelsProductQuery, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeListProductModelsReadProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return queryProductsWithRequestBuilder(query: query, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Query products
     - POST /API/Product/Query
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter query: (body) The details of the query 
     - parameter include: (query) Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeListProductModelsReadProduct> 
     */
    open class func queryProductsWithRequestBuilder(query: ProductModelsProductQuery, include: String? = nil) -> RequestBuilder<EnvelopeListProductModelsReadProduct> {
        let localVariablePath = "/API/Product/Query"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: query)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeListProductModelsReadProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Query products with pagination
     
     - parameter page: (path) The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1 
     - parameter query: (body) The details of the query 
     - parameter include: (query) Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func queryProductsPaged(page: Int, query: ProductModelsProductQuery, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeListProductModelsReadProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return queryProductsPagedWithRequestBuilder(page: page, query: query, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Query products with pagination
     - POST /API/Product/Query/{page}
     - The {Product.Models.ProductQuery.BatchId} property is mandatory when fetching a page other than the first page.  If no BatchId is provided for the first page, a new batch is created and the BatchId can be found in the {Envelope.PageResult} field.
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter page: (path) The page to fetch. To start a new batched query it is mandatory to send in page&#x3D;1 
     - parameter query: (body) The details of the query 
     - parameter include: (query) Comma separated list of child-collections to also include with the queried products. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeListProductModelsReadProduct> 
     */
    open class func queryProductsPagedWithRequestBuilder(page: Int, query: ProductModelsProductQuery, include: String? = nil) -> RequestBuilder<EnvelopeListProductModelsReadProduct> {
        var localVariablePath = "/API/Product/Query/{page}"
        let pagePreEscape = "\(APIHelper.mapValueToPathItem(page))"
        let pagePostEscape = pagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{page}", with: pagePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: query)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeListProductModelsReadProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Query stock
     
     - parameter productItemIds: (body) The details of the query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func queryStock(productItemIds: [Int], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ProductModelsReadProductItemStock]?, _ error: Error?) -> Void)) -> RequestTask {
        return queryStockWithRequestBuilder(productItemIds: productItemIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Query stock
     - POST /API/Product/Stock/Query
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productItemIds: (body) The details of the query. 
     - returns: RequestBuilder<[ProductModelsReadProductItemStock]> 
     */
    open class func queryStockWithRequestBuilder(productItemIds: [Int]) -> RequestBuilder<[ProductModelsReadProductItemStock]> {
        let localVariablePath = "/API/Product/Stock/Query"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productItemIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProductModelsReadProductItemStock]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_updateProduct: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Updates a product
     
     - parameter productId: (path) The id of the product to update. 
     - parameter product: (body) The product data to update. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter include: (query) Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateProduct(productId: String, product: ProductModelsWriteProduct, productIdType: ProductIdType_updateProduct? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeProductModelsReadProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return updateProductWithRequestBuilder(productId: productId, product: product, productIdType: productIdType, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a product
     - PUT /API/Product/{productId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productId: (path) The id of the product to update. 
     - parameter product: (body) The product data to update. 
     - parameter productIdType: (query) The type of product id supplied in {productId}. (optional)
     - parameter include: (query) Comma separated list of child-collections to also include with the updated product. See  {Product.Models.ProductIncludes} names for valid options. (optional)
     - returns: RequestBuilder<EnvelopeProductModelsReadProduct> 
     */
    open class func updateProductWithRequestBuilder(productId: String, product: ProductModelsWriteProduct, productIdType: ProductIdType_updateProduct? = nil, include: String? = nil) -> RequestBuilder<EnvelopeProductModelsReadProduct> {
        var localVariablePath = "/API/Product/{productId}"
        let productIdPreEscape = "\(APIHelper.mapValueToPathItem(productId))"
        let productIdPostEscape = productIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productId}", with: productIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: product)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeProductModelsReadProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productItemIdType
     */
    public enum ProductItemIdType_updateProductItem: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     Updates a product item
     
     - parameter itemId: (path) The id of the product item to update. 
     - parameter productItem: (body) The product item data to update. 
     - parameter productItemIdType: (query) The type of product item id supplied in {itemId}. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateProductItem(itemId: String, productItem: ProductModelsWriteProductItem, productItemIdType: ProductItemIdType_updateProductItem? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeProductModelsReadProductItem?, _ error: Error?) -> Void)) -> RequestTask {
        return updateProductItemWithRequestBuilder(itemId: itemId, productItem: productItem, productItemIdType: productItemIdType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a product item
     - PUT /API/Product/Item/{itemId}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter itemId: (path) The id of the product item to update. 
     - parameter productItem: (body) The product item data to update. 
     - parameter productItemIdType: (query) The type of product item id supplied in {itemId}. (optional)
     - returns: RequestBuilder<EnvelopeProductModelsReadProductItem> 
     */
    open class func updateProductItemWithRequestBuilder(itemId: String, productItem: ProductModelsWriteProductItem, productItemIdType: ProductItemIdType_updateProductItem? = nil) -> RequestBuilder<EnvelopeProductModelsReadProductItem> {
        var localVariablePath = "/API/Product/Item/{itemId}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{itemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productItem)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productItemIdType": (wrappedValue: productItemIdType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeProductModelsReadProductItem>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
