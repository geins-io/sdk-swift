//
// BrandAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BrandAPI {

    /**
     Create a new brand
     
     - parameter brand: (body) The brand to create. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createBrand(brand: BrandModelsWriteBrand, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeBrandModelsReadBrand?, _ error: Error?) -> Void)) -> RequestTask {
        return createBrandWithRequestBuilder(brand: brand).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new brand
     - POST /API/Brand
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter brand: (body) The brand to create. 
     - returns: RequestBuilder<EnvelopeBrandModelsReadBrand> 
     */
    open class func createBrandWithRequestBuilder(brand: BrandModelsWriteBrand) -> RequestBuilder<EnvelopeBrandModelsReadBrand> {
        let localVariablePath = "/API/Brand"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: brand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeBrandModelsReadBrand>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a specific brand
     
     - parameter id: (path) The id of the brand to get. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBrandById(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeBrandModelsReadBrand?, _ error: Error?) -> Void)) -> RequestTask {
        return getBrandByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific brand
     - GET /API/Brand/{id}
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter id: (path) The id of the brand to get. 
     - returns: RequestBuilder<EnvelopeBrandModelsReadBrand> 
     */
    open class func getBrandByIdWithRequestBuilder(id: Int) -> RequestBuilder<EnvelopeBrandModelsReadBrand> {
        var localVariablePath = "/API/Brand/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeBrandModelsReadBrand>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Query brands
     
     - parameter query: (body) The details of the query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func queryBrands(query: BrandModelsBrandQuery, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [BrandModelsReadBrand]?, _ error: Error?) -> Void)) -> RequestTask {
        return queryBrandsWithRequestBuilder(query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Query brands
     - POST /API/Brand/Query
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter query: (body) The details of the query. 
     - returns: RequestBuilder<[BrandModelsReadBrand]> 
     */
    open class func queryBrandsWithRequestBuilder(query: BrandModelsBrandQuery) -> RequestBuilder<[BrandModelsReadBrand]> {
        let localVariablePath = "/API/Brand/Query"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: query)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BrandModelsReadBrand]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a brand
     
     - parameter id: (path) The id of the brand to update. 
     - parameter brand: (body) The brand data to update. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateBrand(id: Int, brand: BrandModelsWriteBrand, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnvelopeBrandModelsReadBrand?, _ error: Error?) -> Void)) -> RequestTask {
        return updateBrandWithRequestBuilder(id: id, brand: brand).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a brand
     - PUT /API/Brand/{id}
     - Leaving out a property will ensure no changes are made to that property.  Collection properties will delete and/or add as necessary to match the supplied data.
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter id: (path) The id of the brand to update. 
     - parameter brand: (body) The brand data to update. 
     - returns: RequestBuilder<EnvelopeBrandModelsReadBrand> 
     */
    open class func updateBrandWithRequestBuilder(id: Int, brand: BrandModelsWriteBrand) -> RequestBuilder<EnvelopeBrandModelsReadBrand> {
        var localVariablePath = "/API/Brand/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: brand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnvelopeBrandModelsReadBrand>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
