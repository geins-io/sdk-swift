//
// PriceListAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PriceListAPI {

    /**
     Get all price list definitions
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listPriceLists(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [PriceListModelsPriceList]?, _ error: Error?) -> Void)) -> RequestTask {
        return listPriceListsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all price list definitions
     - GET /API/PriceList/List
     - - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  - ID for Ordinary, Sale and Campaign price lists starts from 1000000.   The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary=0, Sale=1, Capaign=2)  So :  Ordinary price list for market with ID 1 has ID = 1000000  Sale price list for market with ID 1 has ID = 1000001  Campaign price list for market with ID 1 has ID = 1000002  Ordinary price list for market with ID 2 has ID = 2000000  And so on ...
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<[PriceListModelsPriceList]> 
     */
    open class func listPriceListsWithRequestBuilder() -> RequestBuilder<[PriceListModelsPriceList]> {
        let localVariablePath = "/API/PriceList/List"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PriceListModelsPriceList]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter productIdType
     */
    public enum ProductIdType_updatePricelistPrices: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Updates price list prices
     
     - parameter priceListPrices: (body) List of new price list prices. 
     - parameter productIdType: (query) The type of product id supplied in {priceListPrices} (optional)
     - parameter pricesIncVat: (query) Set to true if prices in {priceListPrices} includes VAT. Leave blank or set to false if they exclude VAT. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePricelistPrices(priceListPrices: [PriceListModelsWritePriceListPrice], productIdType: ProductIdType_updatePricelistPrices? = nil, pricesIncVat: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PriceListModelsPriceListPriceResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePricelistPricesWithRequestBuilder(priceListPrices: priceListPrices, productIdType: productIdType, pricesIncVat: pricesIncVat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates price list prices
     - PUT /API/PriceList/Price
     - - Prices on campaign price lists (id: xxxxxx2) can not be updated. Any such entries will be ignored.  - ID for Ordinary, Sale and Campaign price lists starts from 1000000.   The ID is calculated by this formula, Market ID * 1000000 + Type of price list (Ordinary=0, Sale=1, Capaign=2)  So :  Ordinary price list for market with ID 1 has ID = 1000000  Sale price list for market with ID 1 has ID = 1000001  Campaign price list for market with ID 1 has ID = 1000002  Ordinary price list for market with ID 2 has ID = 2000000  And so on ...
     - API Key:
       - type: apiKey x-apikey (HEADER)
       - name: apiKey
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter priceListPrices: (body) List of new price list prices. 
     - parameter productIdType: (query) The type of product id supplied in {priceListPrices} (optional)
     - parameter pricesIncVat: (query) Set to true if prices in {priceListPrices} includes VAT. Leave blank or set to false if they exclude VAT. (optional)
     - returns: RequestBuilder<PriceListModelsPriceListPriceResponse> 
     */
    open class func updatePricelistPricesWithRequestBuilder(priceListPrices: [PriceListModelsWritePriceListPrice], productIdType: ProductIdType_updatePricelistPrices? = nil, pricesIncVat: Bool? = nil) -> RequestBuilder<PriceListModelsPriceListPriceResponse> {
        let localVariablePath = "/API/PriceList/Price"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: priceListPrices)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "productIdType": (wrappedValue: productIdType?.encodeToJSON(), isExplode: true),
            "pricesIncVat": (wrappedValue: pricesIncVat?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PriceListModelsPriceListPriceResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
